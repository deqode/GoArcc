syntax = "proto3";
package alfred.account.v1;

option go_package = "pb/";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "validate/validate.proto";

// Users can have multiple Accounts
// TODO: Accounts
service AccountService {

    //CreateAccount create new account of a user
    rpc CreateAccount(CreateAccountRequest) returns (Account);

    //UpdateAccount update existing account details
    rpc UpdateAccount(UpdateAccountRequest) returns (Account){
        option (google.api.http) = {
            put: "/v1/account/update-account"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "updateAccount"
        };
    }

    //GetAccount get account details by its unique id
    rpc GetAccount(GetAccountRequest) returns (Account){
        option (google.api.http) = {
            get: "/v1/account/get-account/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "account"
        };
    }

    // TDOD: GetUserAllAccounts
    rpc GetUserAllAccount(GetUserAllAccountRequest) returns (GetUserAllAccountResponse){
        option (google.api.http) = {
            get: "/v1/account/get-user-all-account/{user_id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "userAllAccount"
        };
    }

    //DeleteAccount delete the existing account from DB
    //This will be soft delete in DB
    rpc DeleteAccount(DeleteAccountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/account/delete-account/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "deleteAccount"
        };
    }
}

message CreateAccountRequest {
    Account account = 1;
}

message DeleteAccountRequest {
    string id = 1;
}

message UpdateAccountRequest {
    Account account = 1;
}

message GetAccountRequest {
    string id = 1;
}

message GetUserAllAccountRequest{
    string user_id = 1;
}

message GetUserAllAccountResponse{
    repeated Account accounts = 1;
}

message Account {
    //id generated by uuid
    string id = 1;
    // multiple account identify by slug on ui
    string slug = 2;
    // userId of a user
    string user_id = 3;
}
