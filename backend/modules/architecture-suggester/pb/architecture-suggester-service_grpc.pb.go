// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchitectureSuggesterServiceClient is the client API for architecture-suggester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchitectureSuggesterServiceClient interface {
	GetArchitecture(ctx context.Context, in *GetArchitectureRequest, opts ...grpc.CallOption) (*GetArchitectureResponse, error)
}

type architectureSuggesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchitectureSuggesterServiceClient(cc grpc.ClientConnInterface) ArchitectureSuggesterServiceClient {
	return &architectureSuggesterServiceClient{cc}
}

func (c *architectureSuggesterServiceClient) GetArchitecture(ctx context.Context, in *GetArchitectureRequest, opts ...grpc.CallOption) (*GetArchitectureResponse, error) {
	out := new(GetArchitectureResponse)
	err := c.cc.Invoke(ctx, "/pb.architecture-suggester/GetArchitecture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchitectureSuggesterServiceServer is the server API for architecture-suggester service.
// All implementations must embed UnimplementedArchitectureSuggesterServiceServer
// for forward compatibility
type ArchitectureSuggesterServiceServer interface {
	GetArchitecture(context.Context, *GetArchitectureRequest) (*GetArchitectureResponse, error)
	//mustEmbedUnimplementedArchitectureSuggesterServiceServer()
}

// UnimplementedArchitectureSuggesterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchitectureSuggesterServiceServer struct {
}

func (UnimplementedArchitectureSuggesterServiceServer) GetArchitecture(context.Context, *GetArchitectureRequest) (*GetArchitectureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchitecture not implemented")
}
func (UnimplementedArchitectureSuggesterServiceServer) mustEmbedUnimplementedArchitectureSuggesterServiceServer() {
}

// UnsafeArchitectureSuggesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchitectureSuggesterServiceServer will
// result in compilation errors.
type UnsafeArchitectureSuggesterServiceServer interface {
	mustEmbedUnimplementedArchitectureSuggesterServiceServer()
}

func RegisterArchitectureSuggesterServiceServer(s grpc.ServiceRegistrar, srv ArchitectureSuggesterServiceServer) {
	s.RegisterService(&ArchitectureSuggesterService_ServiceDesc, srv)
}

func _ArchitectureSuggesterService_GetArchitecture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchitectureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchitectureSuggesterServiceServer).GetArchitecture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.architecture-suggester/GetArchitecture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchitectureSuggesterServiceServer).GetArchitecture(ctx, req.(*GetArchitectureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchitectureSuggesterService_ServiceDesc is the grpc.ServiceDesc for architecture-suggester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchitectureSuggesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.architecture-suggester",
	HandlerType: (*ArchitectureSuggesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArchitecture",
			Handler:    _ArchitectureSuggesterService_GetArchitecture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "architecture-suggester-git.proto",
}
