// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__enum_ArchitectureType         *graphql.Enum        // enum ArchitectureType in architecture-suggester-git.proto
	gql__type_GetArchitectureResponse  *graphql.Object      // message GetArchitectureResponse in architecture-suggester-git.proto
	gql__type_GetArchitectureRequest   *graphql.Object      // message GetArchitectureRequest in architecture-suggester-git.proto
	gql__input_GetArchitectureResponse *graphql.InputObject // message GetArchitectureResponse in architecture-suggester-git.proto
	gql__input_GetArchitectureRequest  *graphql.InputObject // message GetArchitectureRequest in architecture-suggester-git.proto
)

func Gql__enum_ArchitectureType() *graphql.Enum {
	if gql__enum_ArchitectureType == nil {
		gql__enum_ArchitectureType = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_ArchitectureType",
			Values: graphql.EnumValueConfigMap{
				"AWS": &graphql.EnumValueConfig{
					Value: ArchitectureType(0),
				},
				"GCP": &graphql.EnumValueConfig{
					Value: ArchitectureType(1),
				},
				"AZURE": &graphql.EnumValueConfig{
					Value: ArchitectureType(2),
				},
				"DIGITAL_OCEAN": &graphql.EnumValueConfig{
					Value: ArchitectureType(3),
				},
			},
		})
	}
	return gql__enum_ArchitectureType
}

func Gql__type_GetArchitectureResponse() *graphql.Object {
	if gql__type_GetArchitectureResponse == nil {
		gql__type_GetArchitectureResponse = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Pb_Type_GetArchitectureResponse",
			Description: `Architecture Response`,
			Fields: graphql.Fields{
				"architecture_type": &graphql.Field{
					Type: graphql.NewList(Gql__enum_ArchitectureType()),
				},
			},
		})
	}
	return gql__type_GetArchitectureResponse
}

func Gql__type_GetArchitectureRequest() *graphql.Object {
	if gql__type_GetArchitectureRequest == nil {
		gql__type_GetArchitectureRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetArchitectureRequest",
			Fields: graphql.Fields{
				"nothing": &graphql.Field{
					Type:        graphql.String,
					Description: `Empty object because graphql does not read empty in request`,
				},
			},
		})
	}
	return gql__type_GetArchitectureRequest
}

func Gql__input_GetArchitectureResponse() *graphql.InputObject {
	if gql__input_GetArchitectureResponse == nil {
		gql__input_GetArchitectureResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetArchitectureResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"architecture_type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__enum_ArchitectureType()),
				},
			},
		})
	}
	return gql__input_GetArchitectureResponse
}

func Gql__input_GetArchitectureRequest() *graphql.InputObject {
	if gql__input_GetArchitectureRequest == nil {
		gql__input_GetArchitectureRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetArchitectureRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"nothing": &graphql.InputObjectFieldConfig{
					Description: `Empty object because graphql does not read empty in request`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_GetArchitectureRequest
}

// graphql__resolver_ArchitectureSuggesterService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ArchitectureSuggesterService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_ArchitectureSuggesterService creates pointer of service struct
func new_graphql_resolver_ArchitectureSuggesterService(conn *grpc.ClientConn) *graphql__resolver_ArchitectureSuggesterService {
	return &graphql__resolver_ArchitectureSuggesterService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ArchitectureSuggesterService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ArchitectureSuggesterService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getArchitecture": &graphql.Field{
			Type: Gql__type_GetArchitectureResponse(),
			Args: graphql.FieldConfigArgument{
				"nothing": &graphql.ArgumentConfig{
					Type:        graphql.String,
					Description: `Empty object because graphql does not read empty in request`,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetArchitectureRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getArchitecture")
				}
				client := NewArchitectureSuggesterServiceClient(conn)
				resp, err := client.GetArchitecture(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetArchitecture")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ArchitectureSuggesterService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterArchitectureSuggesterServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterArchitectureSuggesterServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterArchitectureSuggesterServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service architecture-suggester {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterArchitectureSuggesterServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_ArchitectureSuggesterService(conn))
}
