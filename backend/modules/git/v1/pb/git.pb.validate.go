// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/git.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "alfred/protos/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = types.VCSProviders(0)

	_ = types.VCSProviders(0)

	_ = types.VCSProviders(0)
)

// Validate checks the field values on CloneRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneRepositoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneRepositoryRequestMultiError, or nil if none found.
func (m *CloneRepositoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneRepositoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		err := CloneRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepositoryUrl()) < 3 {
		err := CloneRepositoryRequestValidationError{
			field:  "RepositoryUrl",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := CloneRepositoryRequestValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := CloneRepositoryRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloneRepositoryRequestMultiError(errors)
	}
	return nil
}

// CloneRepositoryRequestMultiError is an error wrapping multiple validation
// errors returned by CloneRepositoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneRepositoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneRepositoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneRepositoryRequestMultiError) AllErrors() []error { return m }

// CloneRepositoryRequestValidationError is the validation error returned by
// CloneRepositoryRequest.Validate if the designated constraints aren't met.
type CloneRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneRepositoryRequestValidationError) ErrorName() string {
	return "CloneRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneRepositoryRequestValidationError{}

// Validate checks the field values on CloneRepositoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneRepositoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneRepositoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneRepositoryResponseMultiError, or nil if none found.
func (m *CloneRepositoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneRepositoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkflowId()) < 3 {
		err := CloneRepositoryResponseValidationError{
			field:  "WorkflowId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRunId()) < 3 {
		err := CloneRepositoryResponseValidationError{
			field:  "RunId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloneRepositoryResponseMultiError(errors)
	}
	return nil
}

// CloneRepositoryResponseMultiError is an error wrapping multiple validation
// errors returned by CloneRepositoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneRepositoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneRepositoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneRepositoryResponseMultiError) AllErrors() []error { return m }

// CloneRepositoryResponseValidationError is the validation error returned by
// CloneRepositoryResponse.Validate if the designated constraints aren't met.
type CloneRepositoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneRepositoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneRepositoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneRepositoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneRepositoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneRepositoryResponseValidationError) ErrorName() string {
	return "CloneRepositoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneRepositoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneRepositoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneRepositoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneRepositoryResponseValidationError{}

// Validate checks the field values on Repository with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Repository) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Repository with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepositoryMultiError, or
// nil if none found.
func (m *Repository) ValidateAll() error {
	return m.validate(true)
}

func (m *Repository) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := RepositoryValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRepoUrl()); l < 1 || l > 100 {
		err := RepositoryValidationError{
			field:  "RepoUrl",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Private

	if len(errors) > 0 {
		return RepositoryMultiError(errors)
	}
	return nil
}

// RepositoryMultiError is an error wrapping multiple validation errors
// returned by Repository.ValidateAll() if the designated constraints aren't met.
type RepositoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepositoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepositoryMultiError) AllErrors() []error { return m }

// RepositoryValidationError is the validation error returned by
// Repository.Validate if the designated constraints aren't met.
type RepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepositoryValidationError) ErrorName() string { return "RepositoryValidationError" }

// Error satisfies the builtin error interface
func (e RepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepositoryValidationError{}

// Validate checks the field values on ListRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepositoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRepositoryRequestMultiError, or nil if none found.
func (m *ListRepositoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepositoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetUserId()) < 3 {
		err := ListRepositoryRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		err := ListRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Label

	if len(errors) > 0 {
		return ListRepositoryRequestMultiError(errors)
	}
	return nil
}

// ListRepositoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListRepositoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRepositoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepositoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepositoryRequestMultiError) AllErrors() []error { return m }

// ListRepositoryRequestValidationError is the validation error returned by
// ListRepositoryRequest.Validate if the designated constraints aren't met.
type ListRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryRequestValidationError) ErrorName() string {
	return "ListRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryRequestValidationError{}

// Validate checks the field values on ListRepositoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepositoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepositoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRepositoryResponseMultiError, or nil if none found.
func (m *ListRepositoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepositoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRepositoryResponseValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRepositoryResponseValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRepositoryResponseValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRepositoryResponseMultiError(errors)
	}
	return nil
}

// ListRepositoryResponseMultiError is an error wrapping multiple validation
// errors returned by ListRepositoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRepositoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepositoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepositoryResponseMultiError) AllErrors() []error { return m }

// ListRepositoryResponseValidationError is the validation error returned by
// ListRepositoryResponse.Validate if the designated constraints aren't met.
type ListRepositoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryResponseValidationError) ErrorName() string {
	return "ListRepositoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryResponseValidationError{}

// Validate checks the field values on GetRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRepositoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRepositoryRequestMultiError, or nil if none found.
func (m *GetRepositoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepositoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetRepoName()) < 1 {
		err := GetRepositoryRequestValidationError{
			field:  "RepoName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		err := GetRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOwnerName()) < 1 {
		err := GetRepositoryRequestValidationError{
			field:  "OwnerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRepositoryRequestMultiError(errors)
	}
	return nil
}

// GetRepositoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetRepositoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRepositoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepositoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepositoryRequestMultiError) AllErrors() []error { return m }

// GetRepositoryRequestValidationError is the validation error returned by
// GetRepositoryRequest.Validate if the designated constraints aren't met.
type GetRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepositoryRequestValidationError) ErrorName() string {
	return "GetRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepositoryRequestValidationError{}

// Validate checks the field values on GetCloningStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloningStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloningStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloningStatusRequestMultiError, or nil if none found.
func (m *GetCloningStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloningStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for RunId

	if len(errors) > 0 {
		return GetCloningStatusRequestMultiError(errors)
	}
	return nil
}

// GetCloningStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetCloningStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCloningStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloningStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloningStatusRequestMultiError) AllErrors() []error { return m }

// GetCloningStatusRequestValidationError is the validation error returned by
// GetCloningStatusRequest.Validate if the designated constraints aren't met.
type GetCloningStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloningStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloningStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloningStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloningStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloningStatusRequestValidationError) ErrorName() string {
	return "GetCloningStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloningStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloningStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloningStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloningStatusRequestValidationError{}

// Validate checks the field values on GetCloningStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloningStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloningStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloningStatusResponseMultiError, or nil if none found.
func (m *GetCloningStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloningStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetCloningStatusResponseMultiError(errors)
	}
	return nil
}

// GetCloningStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetCloningStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCloningStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloningStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloningStatusResponseMultiError) AllErrors() []error { return m }

// GetCloningStatusResponseValidationError is the validation error returned by
// GetCloningStatusResponse.Validate if the designated constraints aren't met.
type GetCloningStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloningStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloningStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloningStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloningStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloningStatusResponseValidationError) ErrorName() string {
	return "GetCloningStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloningStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloningStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloningStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloningStatusResponseValidationError{}
