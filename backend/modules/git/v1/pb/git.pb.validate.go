// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/git.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	types "alfred/protos/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = types.VCSProviders(0)

	_ = types.VCSProviders(0)

	_ = types.VCSProviders(0)
)

// Validate checks the field values on CloneRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneRepositoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		return CloneRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRepositoryUrl()) < 3 {
		return CloneRepositoryRequestValidationError{
			field:  "RepositoryUrl",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		return CloneRepositoryRequestValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		return CloneRepositoryRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CloneRepositoryRequestValidationError is the validation error returned by
// CloneRepositoryRequest.Validate if the designated constraints aren't met.
type CloneRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneRepositoryRequestValidationError) ErrorName() string {
	return "CloneRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneRepositoryRequestValidationError{}

// Validate checks the field values on CloneRepositoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloneRepositoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetWorkflowId()) < 3 {
		return CloneRepositoryResponseValidationError{
			field:  "WorkflowId",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRunId()) < 3 {
		return CloneRepositoryResponseValidationError{
			field:  "RunId",
			reason: "value length must be at least 3 runes",
		}
	}

	return nil
}

// CloneRepositoryResponseValidationError is the validation error returned by
// CloneRepositoryResponse.Validate if the designated constraints aren't met.
type CloneRepositoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneRepositoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneRepositoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneRepositoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneRepositoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneRepositoryResponseValidationError) ErrorName() string {
	return "CloneRepositoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneRepositoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneRepositoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneRepositoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneRepositoryResponseValidationError{}

// Validate checks the field values on Repository with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Repository) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		return RepositoryValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRepoUrl()); l < 1 || l > 100 {
		return RepositoryValidationError{
			field:  "RepoUrl",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	// no validation rules for Private

	return nil
}

// RepositoryValidationError is the validation error returned by
// Repository.Validate if the designated constraints aren't met.
type RepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepositoryValidationError) ErrorName() string { return "RepositoryValidationError" }

// Error satisfies the builtin error interface
func (e RepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepositoryValidationError{}

// Validate checks the field values on ListRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetUserId()) < 3 {
		return ListRepositoryRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		return ListRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
	}

	// no validation rules for Label

	return nil
}

// ListRepositoryRequestValidationError is the validation error returned by
// ListRepositoryRequest.Validate if the designated constraints aren't met.
type ListRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryRequestValidationError) ErrorName() string {
	return "ListRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryRequestValidationError{}

// Validate checks the field values on ListRepositoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRepositoryResponseValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRepositoryResponseValidationError is the validation error returned by
// ListRepositoryResponse.Validate if the designated constraints aren't met.
type ListRepositoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryResponseValidationError) ErrorName() string {
	return "ListRepositoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryResponseValidationError{}

// Validate checks the field values on GetRepositoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRepositoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	if utf8.RuneCountInString(m.GetRepoName()) < 1 {
		return GetRepositoryRequestValidationError{
			field:  "RepoName",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAccountId()) < 3 {
		return GetRepositoryRequestValidationError{
			field:  "AccountId",
			reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOwnerName()) < 1 {
		return GetRepositoryRequestValidationError{
			field:  "OwnerName",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetRepositoryRequestValidationError is the validation error returned by
// GetRepositoryRequest.Validate if the designated constraints aren't met.
type GetRepositoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepositoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepositoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepositoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepositoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepositoryRequestValidationError) ErrorName() string {
	return "GetRepositoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepositoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepositoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepositoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepositoryRequestValidationError{}

// Validate checks the field values on GetCloningStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloningStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WorkflowId

	// no validation rules for RunId

	return nil
}

// GetCloningStatusRequestValidationError is the validation error returned by
// GetCloningStatusRequest.Validate if the designated constraints aren't met.
type GetCloningStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloningStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloningStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloningStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloningStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloningStatusRequestValidationError) ErrorName() string {
	return "GetCloningStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloningStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloningStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloningStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloningStatusRequestValidationError{}

// Validate checks the field values on GetCloningStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCloningStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// GetCloningStatusResponseValidationError is the validation error returned by
// GetCloningStatusResponse.Validate if the designated constraints aren't met.
type GetCloningStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloningStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloningStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloningStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloningStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloningStatusResponseValidationError) ErrorName() string {
	return "GetCloningStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloningStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloningStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloningStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloningStatusResponseValidationError{}
