// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GitsClient is the client API for Gits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitsClient interface {
	//listRepository list all repository of user's account
	ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error)
	// GetRepository get a repository using its unique id
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
	// CloneRepository will start a cadence workflow
	CloneRepository(ctx context.Context, in *CloneRepositoryRequest, opts ...grpc.CallOption) (*CloneRepositoryResponse, error)
	// GetCloningStatus returns the status of running workflow
	GetCloningStatus(ctx context.Context, in *GetCloningStatusRequest, opts ...grpc.CallOption) (*GetCloningStatusResponse, error)
}

type gitsClient struct {
	cc grpc.ClientConnInterface
}

func NewGitsClient(cc grpc.ClientConnInterface) GitsClient {
	return &gitsClient{cc}
}

func (c *gitsClient) ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error) {
	out := new(ListRepositoryResponse)
	err := c.cc.Invoke(ctx, "/alfred.git.v1.Gits/listRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/alfred.git.v1.Gits/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) CloneRepository(ctx context.Context, in *CloneRepositoryRequest, opts ...grpc.CallOption) (*CloneRepositoryResponse, error) {
	out := new(CloneRepositoryResponse)
	err := c.cc.Invoke(ctx, "/alfred.git.v1.Gits/CloneRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitsClient) GetCloningStatus(ctx context.Context, in *GetCloningStatusRequest, opts ...grpc.CallOption) (*GetCloningStatusResponse, error) {
	out := new(GetCloningStatusResponse)
	err := c.cc.Invoke(ctx, "/alfred.git.v1.Gits/GetCloningStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitsServer is the server API for Gits service.
// All implementations should embed UnimplementedGitsServer
// for forward compatibility
type GitsServer interface {
	//listRepository list all repository of user's account
	ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error)
	// GetRepository get a repository using its unique id
	GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error)
	// CloneRepository will start a cadence workflow
	CloneRepository(context.Context, *CloneRepositoryRequest) (*CloneRepositoryResponse, error)
	// GetCloningStatus returns the status of running workflow
	GetCloningStatus(context.Context, *GetCloningStatusRequest) (*GetCloningStatusResponse, error)
}

// UnimplementedGitsServer should be embedded to have forward compatible implementations.
type UnimplementedGitsServer struct {
}

func (UnimplementedGitsServer) ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepository not implemented")
}
func (UnimplementedGitsServer) GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedGitsServer) CloneRepository(context.Context, *CloneRepositoryRequest) (*CloneRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRepository not implemented")
}
func (UnimplementedGitsServer) GetCloningStatus(context.Context, *GetCloningStatusRequest) (*GetCloningStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloningStatus not implemented")
}

// UnsafeGitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitsServer will
// result in compilation errors.
type UnsafeGitsServer interface {
	mustEmbedUnimplementedGitsServer()
}

func RegisterGitsServer(s grpc.ServiceRegistrar, srv GitsServer) {
	s.RegisterService(&Gits_ServiceDesc, srv)
}

func _Gits_ListRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).ListRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.git.v1.Gits/listRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).ListRepository(ctx, req.(*ListRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.git.v1.Gits/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_CloneRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).CloneRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.git.v1.Gits/CloneRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).CloneRepository(ctx, req.(*CloneRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gits_GetCloningStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloningStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitsServer).GetCloningStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.git.v1.Gits/GetCloningStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitsServer).GetCloningStatus(ctx, req.(*GetCloningStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gits_ServiceDesc is the grpc.ServiceDesc for Gits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alfred.git.v1.Gits",
	HandlerType: (*GitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listRepository",
			Handler:    _Gits_ListRepository_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _Gits_GetRepository_Handler,
		},
		{
			MethodName: "CloneRepository",
			Handler:    _Gits_CloneRepository_Handler,
		},
		{
			MethodName: "GetCloningStatus",
			Handler:    _Gits_GetCloningStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/git.proto",
}
