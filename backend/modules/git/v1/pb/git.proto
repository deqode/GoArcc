syntax = "proto3";
package alfred.git.v1;

option go_package = "/pb";

import "google/api/annotation.proto";
import "include/graphql.proto";
import "types/enums.proto";
import "validate/validate.proto";

service Gits {
    //listRepository list all repository of user's account
    rpc listRepository(ListRepositoryRequest) returns (ListRepositoryResponse){
        option (google.api.http) = {
            get: "/v1/git-service/repositories"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "repositories"
        };
    }

    // GetRepository get a repository using its unique id
    rpc GetRepository(GetRepositoryRequest) returns (Repository){
        option (google.api.http) = {
            get: "/v1/git-service/repository"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "repository"
        };
    }

    // CloneRepository will start a cadence workflow
    rpc CloneRepository(CloneRepositoryRequest) returns (CloneRepositoryResponse){
        option (google.api.http) = {
            post: "/v1/git-service/clone-repository"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "cloneRepository"
        };
    }

    // GetCloningStatus returns the status of running workflow
    rpc GetCloningStatus(GetCloningStatusRequest) returns (GetCloningStatusResponse){
        option (google.api.http) = {
            get: "/v1/git-service/get-cloning-status"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "getCloningStatus"
        };
    }
}

message CloneRepositoryRequest {
    types.VCSProviders provider = 1;
    string account_id = 2 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string repository_url = 3 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string branch_name = 4 [(validate.rules).string.min_len = 1, (graphql.field) = {required: true}];
    string user_name = 5 [(validate.rules).string.min_len = 1, (graphql.field) = {required: true}];
}

message  CloneRepositoryResponse {
    string workflow_id = 1 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string run_id = 2 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
}

message Repository{
    int64 id = 1;
    string name = 2 [(validate.rules).string={min_len: 1 max_len: 100}, (graphql.field) = {required: true}];
    string repo_url = 4 [(validate.rules).string={min_len: 1 max_len: 100}, (graphql.field) = {required: true}];
    bool private = 5;
    repeated string branches = 6;
}

message ListRepositoryRequest{
    types.VCSProviders provider = 1;
    string user_id = 2 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string account_id = 3 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string label = 4;
}
message ListRepositoryResponse{
    repeated Repository repositories = 1;
}

message GetRepositoryRequest{
    types.VCSProviders provider = 1;
    string repo_name = 2 [(validate.rules).string.min_len = 1, (graphql.field) = {required: true}];
    string account_id = 3 [(validate.rules).string.min_len = 3, (graphql.field) = {required: true}];
    string owner_name = 4 [(validate.rules).string.min_len = 1, (graphql.field) = {required: true}];
}

message GetCloningStatusRequest{
    string workflow_id = 1;
    string run_id = 2;
}

message GetCloningStatusResponse{
    bool status = 1;
}
