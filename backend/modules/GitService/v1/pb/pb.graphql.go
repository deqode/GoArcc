// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	types "alfred/protos/types"
	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"

	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
)

var (
	gql__type_Reposistory              *graphql.Object      // message Reposistory in git-service.proto
	gql__type_ListReposistoryResponse  *graphql.Object      // message ListReposistoryResponse in git-service.proto
	gql__type_ListReposistoryRequest   *graphql.Object      // message ListReposistoryRequest in git-service.proto
	gql__type_GetReposistoryRequest    *graphql.Object      // message GetReposistoryRequest in git-service.proto
	gql__input_Reposistory             *graphql.InputObject // message Reposistory in git-service.proto
	gql__input_ListReposistoryResponse *graphql.InputObject // message ListReposistoryResponse in git-service.proto
	gql__input_ListReposistoryRequest  *graphql.InputObject // message ListReposistoryRequest in git-service.proto
	gql__input_GetReposistoryRequest   *graphql.InputObject // message GetReposistoryRequest in git-service.proto
)

func Gql__type_Reposistory() *graphql.Object {
	if gql__type_Reposistory == nil {
		gql__type_Reposistory = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_Reposistory",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.Int,
				},
				"node_id": &graphql.Field{
					Type: graphql.String,
				},
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"full_name": &graphql.Field{
					Type: graphql.String,
				},
				"default_branch": &graphql.Field{
					Type: graphql.String,
				},
				"master_branch": &graphql.Field{
					Type: graphql.String,
				},
				"created_at": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"pushed_at": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"updated_at": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"clone_url": &graphql.Field{
					Type: graphql.String,
				},
				"git_url": &graphql.Field{
					Type: graphql.String,
				},
				"size": &graphql.Field{
					Type: graphql.Int,
				},
				"private": &graphql.Field{
					Type: graphql.Boolean,
				},
				"branches": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_Reposistory
}

func Gql__type_ListReposistoryResponse() *graphql.Object {
	if gql__type_ListReposistoryResponse == nil {
		gql__type_ListReposistoryResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListReposistoryResponse",
			Fields: graphql.Fields{
				"reposistories": &graphql.Field{
					Type: graphql.NewList(Gql__type_Reposistory()),
				},
			},
		})
	}
	return gql__type_ListReposistoryResponse
}

func Gql__type_ListReposistoryRequest() *graphql.Object {
	if gql__type_ListReposistoryRequest == nil {
		gql__type_ListReposistoryRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListReposistoryRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
				"user_id": &graphql.Field{
					Type: graphql.String,
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ListReposistoryRequest
}

func Gql__type_GetReposistoryRequest() *graphql.Object {
	if gql__type_GetReposistoryRequest == nil {
		gql__type_GetReposistoryRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetReposistoryRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
				"repo_name": &graphql.Field{
					Type: graphql.String,
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetReposistoryRequest
}

func Gql__input_Reposistory() *graphql.InputObject {
	if gql__input_Reposistory == nil {
		gql__input_Reposistory = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_Reposistory",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"node_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"full_name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"default_branch": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"master_branch": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"created_at": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"pushed_at": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"updated_at": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"clone_url": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"git_url": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"size": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"private": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"branches": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__input_Reposistory
}

func Gql__input_ListReposistoryResponse() *graphql.InputObject {
	if gql__input_ListReposistoryResponse == nil {
		gql__input_ListReposistoryResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListReposistoryResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"reposistories": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Reposistory()),
				},
			},
		})
	}
	return gql__input_ListReposistoryResponse
}

func Gql__input_ListReposistoryRequest() *graphql.InputObject {
	if gql__input_ListReposistoryRequest == nil {
		gql__input_ListReposistoryRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListReposistoryRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"user_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ListReposistoryRequest
}

func Gql__input_GetReposistoryRequest() *graphql.InputObject {
	if gql__input_GetReposistoryRequest == nil {
		gql__input_GetReposistoryRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetReposistoryRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"repo_name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GetReposistoryRequest
}

// graphql__resolver_GitService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_GitService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_GitService creates pointer of service struct
func new_graphql_resolver_GitService(conn *grpc.ClientConn) *graphql__resolver_GitService {
	return &graphql__resolver_GitService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_GitService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_GitService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"reposistories": &graphql.Field{
			Type: Gql__type_ListReposistoryResponse(),
			Args: graphql.FieldConfigArgument{
				"provider": &graphql.ArgumentConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"user_id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"account_id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ListReposistoryRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for reposistories")
				}
				client := NewGitServiceClient(conn)
				resp, err := client.listReposistory(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC listReposistory")
				}
				return resp, nil
			},
		},
		"reposistory": &graphql.Field{
			Type: Gql__type_Reposistory(),
			Args: graphql.FieldConfigArgument{
				"provider": &graphql.ArgumentConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"repo_name": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"account_id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetReposistoryRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for reposistory")
				}
				client := NewGitServiceClient(conn)
				resp, err := client.GetReposistory(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetReposistory")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_GitService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterGitServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterGitServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterGitServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service GitService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterGitServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_GitService(conn))
}
