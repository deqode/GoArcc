syntax = "proto3";
package alfred.git.v1;

option go_package = "/pb";

import "google/protobuf/timestamp.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "types/enums.proto";

service GitService {
    //listRepository list all repository of user's account
    rpc listRepository(ListRepositoryRequest) returns (ListRepositoryResponse){
        option (google.api.http) = {
            get: "/v1/git-service/repositories"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "repositories"
        };
    }

    rpc GetRepository(GetRepositoryRequest) returns (Repository){
        option (google.api.http) = {
            get: "/v1/git-service/repository"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "repository"
        };
    }

    rpc CloneRepository(CloneRepositoryRequest) returns (CloneRepositoryResponse){
        option (google.api.http) = {
            post: "/v1/git-service/clone-repository"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "cloneRepository"
        };
    }
    rpc GetCloningStatus(GetCloningStatusRequest) returns (GetCloningStatusResponse){
        option (google.api.http) = {
            get: "/v1/git-service/get-cloning-status"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "getCloningStatus"
        };
    }
}

message CloneRepositoryRequest {
    types.GitProviders provider = 1;
    string account_id = 2;
    string repository_url = 3;
    string branch_name = 4;
    string user_name = 5;
}

message  CloneRepositoryResponse {
    string workflow_id = 1;
    string run_id = 2;
}


//todo: rename git url to generic name
message Repository{
    int64 id = 1;
    string node_id = 2;
    string name = 3;
    string full_name = 4;
    string default_branch = 6;
    string master_branch = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp pushed_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    string clone_url = 11;
    string git_url = 12;
    int32 size = 13;
    bool private = 14;
    repeated string branches = 15;
}

message ListRepositoryRequest{
    types.GitProviders provider = 1;
    string user_id = 2;
    string account_id = 3;
    string label = 4;
}
message ListRepositoryResponse{
    repeated Repository repositories = 1;
}

message GetRepositoryRequest{
    types.GitProviders provider = 1;
    string repo_name = 2;
    string account_id = 3;
    string owner_name = 4;
}

message GetCloningStatusRequest{
    string workflow_id = 1;
    string run_id = 2;
}

message GetCloningStatusResponse{
    bool status = 1;
}
