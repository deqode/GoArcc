// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/authentication.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ValidateUserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserLoginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateUserLoginRequestMultiError, or nil if none found.
func (m *ValidateUserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Password

	if len(errors) > 0 {
		return ValidateUserLoginRequestMultiError(errors)
	}
	return nil
}

// ValidateUserLoginRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateUserLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateUserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserLoginRequestMultiError) AllErrors() []error { return m }

// ValidateUserLoginRequestValidationError is the validation error returned by
// ValidateUserLoginRequest.Validate if the designated constraints aren't met.
type ValidateUserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserLoginRequestValidationError) ErrorName() string {
	return "ValidateUserLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserLoginRequestValidationError{}

// Validate checks the field values on ValidateUserLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateUserLoginResponseMultiError, or nil if none found.
func (m *ValidateUserLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ValidateUserLoginResponseMultiError(errors)
	}
	return nil
}

// ValidateUserLoginResponseMultiError is an error wrapping multiple validation
// errors returned by ValidateUserLoginResponse.ValidateAll() if the
// designated constraints aren't met.
type ValidateUserLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserLoginResponseMultiError) AllErrors() []error { return m }

// ValidateUserLoginResponseValidationError is the validation error returned by
// ValidateUserLoginResponse.Validate if the designated constraints aren't met.
type ValidateUserLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserLoginResponseValidationError) ErrorName() string {
	return "ValidateUserLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserLoginResponseValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}
	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on LoginCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCallbackRequestMultiError, or nil if none found.
func (m *LoginCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginCallbackRequestMultiError(errors)
	}
	return nil
}

// LoginCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by LoginCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCallbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCallbackRequestMultiError) AllErrors() []error { return m }

// LoginCallbackRequestValidationError is the validation error returned by
// LoginCallbackRequest.Validate if the designated constraints aren't met.
type LoginCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCallbackRequestValidationError) ErrorName() string {
	return "LoginCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCallbackRequestValidationError{}

// Validate checks the field values on LoginCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCallbackResponseMultiError, or nil if none found.
func (m *LoginCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdToken

	// no validation rules for AccessToken

	// no validation rules for UserId

	if len(errors) > 0 {
		return LoginCallbackResponseMultiError(errors)
	}
	return nil
}

// LoginCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by LoginCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type LoginCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCallbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCallbackResponseMultiError) AllErrors() []error { return m }

// LoginCallbackResponseValidationError is the validation error returned by
// LoginCallbackResponse.Validate if the designated constraints aren't met.
type LoginCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCallbackResponseValidationError) ErrorName() string {
	return "LoginCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCallbackResponseValidationError{}
