// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"

	gql_ptypes_empty "github.com/ysugimoto/grpc-graphql-gateway/ptypes/empty"
)

var (
	gql__enum_StackType                *graphql.Enum        // enum StackType in pb/stack.proto
	gql__enum_StackStatus              *graphql.Enum        // enum StackStatus in pb/stack.proto
	gql__enum_StackEnvironment         *graphql.Enum        // enum StackEnvironment in pb/stack.proto
	gql__enum_StackBuildStatus         *graphql.Enum        // enum StackBuildStatus in pb/stack.proto
	gql__type_UpdateStackRequest       *graphql.Object      // message UpdateStackRequest in pb/stack.proto
	gql__type_StackBuild               *graphql.Object      // message StackBuild in pb/stack.proto
	gql__type_Stack                    *graphql.Object      // message Stack in pb/stack.proto
	gql__type_ListStackResponse        *graphql.Object      // message ListStackResponse in pb/stack.proto
	gql__type_ListStackRequest         *graphql.Object      // message ListStackRequest in pb/stack.proto
	gql__type_ListStackBuildResponse   *graphql.Object      // message ListStackBuildResponse in pb/stack.proto
	gql__type_ListStackBuildRequest    *graphql.Object      // message ListStackBuildRequest in pb/stack.proto
	gql__type_GetStackRequest          *graphql.Object      // message GetStackRequest in pb/stack.proto
	gql__type_GetStackBuildRequest     *graphql.Object      // message GetStackBuildRequest in pb/stack.proto
	gql__type_DeleteStackRequest       *graphql.Object      // message DeleteStackRequest in pb/stack.proto
	gql__type_DeleteStackBuildRequest  *graphql.Object      // message DeleteStackBuildRequest in pb/stack.proto
	gql__type_CreateStackRequest       *graphql.Object      // message CreateStackRequest in pb/stack.proto
	gql__type_CreateStackBuildRequest  *graphql.Object      // message CreateStackBuildRequest in pb/stack.proto
	gql__input_UpdateStackRequest      *graphql.InputObject // message UpdateStackRequest in pb/stack.proto
	gql__input_StackBuild              *graphql.InputObject // message StackBuild in pb/stack.proto
	gql__input_Stack                   *graphql.InputObject // message Stack in pb/stack.proto
	gql__input_ListStackResponse       *graphql.InputObject // message ListStackResponse in pb/stack.proto
	gql__input_ListStackRequest        *graphql.InputObject // message ListStackRequest in pb/stack.proto
	gql__input_ListStackBuildResponse  *graphql.InputObject // message ListStackBuildResponse in pb/stack.proto
	gql__input_ListStackBuildRequest   *graphql.InputObject // message ListStackBuildRequest in pb/stack.proto
	gql__input_GetStackRequest         *graphql.InputObject // message GetStackRequest in pb/stack.proto
	gql__input_GetStackBuildRequest    *graphql.InputObject // message GetStackBuildRequest in pb/stack.proto
	gql__input_DeleteStackRequest      *graphql.InputObject // message DeleteStackRequest in pb/stack.proto
	gql__input_DeleteStackBuildRequest *graphql.InputObject // message DeleteStackBuildRequest in pb/stack.proto
	gql__input_CreateStackRequest      *graphql.InputObject // message CreateStackRequest in pb/stack.proto
	gql__input_CreateStackBuildRequest *graphql.InputObject // message CreateStackBuildRequest in pb/stack.proto
)

func Gql__enum_StackType() *graphql.Enum {
	if gql__enum_StackType == nil {
		gql__enum_StackType = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_StackType",
			Values: graphql.EnumValueConfigMap{
				"go": &graphql.EnumValueConfig{
					Value: StackType(0),
				},
				"ruby": &graphql.EnumValueConfig{
					Value: StackType(1),
				},
				"node": &graphql.EnumValueConfig{
					Value: StackType(2),
				},
				"python": &graphql.EnumValueConfig{
					Value: StackType(3),
				},
			},
		})
	}
	return gql__enum_StackType
}

func Gql__enum_StackStatus() *graphql.Enum {
	if gql__enum_StackStatus == nil {
		gql__enum_StackStatus = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_StackStatus",
			Values: graphql.EnumValueConfigMap{
				"ReadyForDeployment": &graphql.EnumValueConfig{
					Value: StackStatus(0),
				},
				"deployed": &graphql.EnumValueConfig{
					Value: StackStatus(1),
				},
				"error": &graphql.EnumValueConfig{
					Value: StackStatus(2),
				},
			},
		})
	}
	return gql__enum_StackStatus
}

func Gql__enum_StackEnvironment() *graphql.Enum {
	if gql__enum_StackEnvironment == nil {
		gql__enum_StackEnvironment = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_StackEnvironment",
			Values: graphql.EnumValueConfigMap{
				"development": &graphql.EnumValueConfig{
					Value: StackEnvironment(0),
				},
				"production": &graphql.EnumValueConfig{
					Value: StackEnvironment(1),
				},
			},
		})
	}
	return gql__enum_StackEnvironment
}

func Gql__enum_StackBuildStatus() *graphql.Enum {
	if gql__enum_StackBuildStatus == nil {
		gql__enum_StackBuildStatus = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_StackBuildStatus",
			Values: graphql.EnumValueConfigMap{
				"failed": &graphql.EnumValueConfig{
					Value: StackBuildStatus(0),
				},
				"pending": &graphql.EnumValueConfig{
					Value: StackBuildStatus(1),
				},
				"succeeded": &graphql.EnumValueConfig{
					Value: StackBuildStatus(2),
				},
			},
		})
	}
	return gql__enum_StackBuildStatus
}

func Gql__type_UpdateStackRequest() *graphql.Object {
	if gql__type_UpdateStackRequest == nil {
		gql__type_UpdateStackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UpdateStackRequest",
			Fields: graphql.Fields{
				"stack": &graphql.Field{
					Type: Gql__type_Stack(),
				},
			},
		})
	}
	return gql__type_UpdateStackRequest
}

func Gql__type_StackBuild() *graphql.Object {
	if gql__type_StackBuild == nil {
		gql__type_StackBuild = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Pb_Type_StackBuild",
			Description: `service stack_builds`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `auto generated`,
				},
				"stack_id": &graphql.Field{
					Type:        graphql.String,
					Description: `every build belong to an stack`,
				},
				"status": &graphql.Field{
					Type:        Gql__enum_StackBuildStatus(),
					Description: `failed , pending, succeeded`,
				},
				"slug": &graphql.Field{
					Type:        graphql.String,
					Description: `slug of the stack_build`,
				},
				"account_id": &graphql.Field{
					Type:        graphql.String,
					Description: `account id of stack_build`,
				},
				"log_stream_channel": &graphql.Field{
					Type:        graphql.String,
					Description: `output centrifugo url, used by frontend to show live logs to user`,
				},
				"completed_at": &graphql.Field{
					Type:        gql_ptypes_timestamp.Gql__type_Timestamp(),
					Description: `stack_build completed date`,
				},
			},
		})
	}
	return gql__type_StackBuild
}

func Gql__type_Stack() *graphql.Object {
	if gql__type_Stack == nil {
		gql__type_Stack = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_Stack",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `auto generated`,
				},
				"name": &graphql.Field{
					Type:        graphql.String,
					Description: `name of the stack`,
				},
				"slug": &graphql.Field{
					Type:        graphql.String,
					Description: `slug of the stack`,
				},
				"account_id": &graphql.Field{
					Type:        graphql.String,
					Description: `account id of stack`,
				},
				"cloud_connection_id": &graphql.Field{
					Type:        graphql.String,
					Description: `cloud_connection_id required to identify cloud provider`,
				},
				"vcs_connection_id": &graphql.Field{
					Type:        graphql.String,
					Description: `vcs_connection_id of user vcs`,
				},
				"git_url": &graphql.Field{
					Type:        graphql.String,
					Description: `git url`,
				},
				"git_branch": &graphql.Field{
					Type:        graphql.String,
					Description: `git branch`,
				},
				"environment": &graphql.Field{
					Type:        Gql__enum_StackEnvironment(),
					Description: `dev or production`,
				},
				"stack_type": &graphql.Field{
					Type:        Gql__enum_StackType(),
					Description: `stack type will be go, ruby, node etc`,
				},
				"archived_at": &graphql.Field{
					Type:        gql_ptypes_timestamp.Gql__type_Timestamp(),
					Description: `archived date`,
				},
				"released_at": &graphql.Field{
					Type:        gql_ptypes_timestamp.Gql__type_Timestamp(),
					Description: `stack released date`,
				},
				"status": &graphql.Field{
					Type:        Gql__enum_StackStatus(),
					Description: `status of stack deployed, failed,`,
				},
				"web_url": &graphql.Field{
					Type:        graphql.String,
					Description: `url where stack is deployed`,
				},
			},
		})
	}
	return gql__type_Stack
}

func Gql__type_ListStackResponse() *graphql.Object {
	if gql__type_ListStackResponse == nil {
		gql__type_ListStackResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListStackResponse",
			Fields: graphql.Fields{
				"stacks": &graphql.Field{
					Type: graphql.NewList(Gql__type_Stack()),
				},
			},
		})
	}
	return gql__type_ListStackResponse
}

func Gql__type_ListStackRequest() *graphql.Object {
	if gql__type_ListStackRequest == nil {
		gql__type_ListStackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListStackRequest",
			Fields: graphql.Fields{
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ListStackRequest
}

func Gql__type_ListStackBuildResponse() *graphql.Object {
	if gql__type_ListStackBuildResponse == nil {
		gql__type_ListStackBuildResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListStackBuildResponse",
			Fields: graphql.Fields{
				"stack_builds": &graphql.Field{
					Type: graphql.NewList(Gql__type_StackBuild()),
				},
			},
		})
	}
	return gql__type_ListStackBuildResponse
}

func Gql__type_ListStackBuildRequest() *graphql.Object {
	if gql__type_ListStackBuildRequest == nil {
		gql__type_ListStackBuildRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListStackBuildRequest",
			Fields: graphql.Fields{
				"stack_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ListStackBuildRequest
}

func Gql__type_GetStackRequest() *graphql.Object {
	if gql__type_GetStackRequest == nil {
		gql__type_GetStackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetStackRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetStackRequest
}

func Gql__type_GetStackBuildRequest() *graphql.Object {
	if gql__type_GetStackBuildRequest == nil {
		gql__type_GetStackBuildRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetStackBuildRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetStackBuildRequest
}

func Gql__type_DeleteStackRequest() *graphql.Object {
	if gql__type_DeleteStackRequest == nil {
		gql__type_DeleteStackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_DeleteStackRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_DeleteStackRequest
}

func Gql__type_DeleteStackBuildRequest() *graphql.Object {
	if gql__type_DeleteStackBuildRequest == nil {
		gql__type_DeleteStackBuildRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_DeleteStackBuildRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
				"delete_physical": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_DeleteStackBuildRequest
}

func Gql__type_CreateStackRequest() *graphql.Object {
	if gql__type_CreateStackRequest == nil {
		gql__type_CreateStackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CreateStackRequest",
			Fields: graphql.Fields{
				"stack": &graphql.Field{
					Type: Gql__type_Stack(),
				},
			},
		})
	}
	return gql__type_CreateStackRequest
}

func Gql__type_CreateStackBuildRequest() *graphql.Object {
	if gql__type_CreateStackBuildRequest == nil {
		gql__type_CreateStackBuildRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CreateStackBuildRequest",
			Fields: graphql.Fields{
				"stack_build": &graphql.Field{
					Type: Gql__type_StackBuild(),
				},
			},
		})
	}
	return gql__type_CreateStackBuildRequest
}

func Gql__input_UpdateStackRequest() *graphql.InputObject {
	if gql__input_UpdateStackRequest == nil {
		gql__input_UpdateStackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UpdateStackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"stack": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Stack(),
				},
			},
		})
	}
	return gql__input_UpdateStackRequest
}

func Gql__input_StackBuild() *graphql.InputObject {
	if gql__input_StackBuild == nil {
		gql__input_StackBuild = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_StackBuild",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `auto generated`,
					Type:        graphql.String,
				},
				"stack_id": &graphql.InputObjectFieldConfig{
					Description: `every build belong to an stack`,
					Type:        graphql.String,
				},
				"status": &graphql.InputObjectFieldConfig{
					Description: `failed , pending, succeeded`,
					Type:        Gql__enum_StackBuildStatus(),
				},
				"slug": &graphql.InputObjectFieldConfig{
					Description: `slug of the stack_build`,
					Type:        graphql.String,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Description: `account id of stack_build`,
					Type:        graphql.String,
				},
				"log_stream_channel": &graphql.InputObjectFieldConfig{
					Description: `output centrifugo url, used by frontend to show live logs to user`,
					Type:        graphql.String,
				},
				"completed_at": &graphql.InputObjectFieldConfig{
					Description: `stack_build completed date`,
					Type:        gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
			},
		})
	}
	return gql__input_StackBuild
}

func Gql__input_Stack() *graphql.InputObject {
	if gql__input_Stack == nil {
		gql__input_Stack = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_Stack",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `auto generated`,
					Type:        graphql.String,
				},
				"name": &graphql.InputObjectFieldConfig{
					Description: `name of the stack`,
					Type:        graphql.String,
				},
				"slug": &graphql.InputObjectFieldConfig{
					Description: `slug of the stack`,
					Type:        graphql.String,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Description: `account id of stack`,
					Type:        graphql.String,
				},
				"cloud_connection_id": &graphql.InputObjectFieldConfig{
					Description: `cloud_connection_id required to identify cloud provider`,
					Type:        graphql.String,
				},
				"vcs_connection_id": &graphql.InputObjectFieldConfig{
					Description: `vcs_connection_id of user vcs`,
					Type:        graphql.String,
				},
				"git_url": &graphql.InputObjectFieldConfig{
					Description: `git url`,
					Type:        graphql.String,
				},
				"git_branch": &graphql.InputObjectFieldConfig{
					Description: `git branch`,
					Type:        graphql.String,
				},
				"environment": &graphql.InputObjectFieldConfig{
					Description: `dev or production`,
					Type:        Gql__enum_StackEnvironment(),
				},
				"stack_type": &graphql.InputObjectFieldConfig{
					Description: `stack type will be go, ruby, node etc`,
					Type:        Gql__enum_StackType(),
				},
				"archived_at": &graphql.InputObjectFieldConfig{
					Description: `archived date`,
					Type:        gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"released_at": &graphql.InputObjectFieldConfig{
					Description: `stack released date`,
					Type:        gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"status": &graphql.InputObjectFieldConfig{
					Description: `status of stack deployed, failed,`,
					Type:        Gql__enum_StackStatus(),
				},
				"web_url": &graphql.InputObjectFieldConfig{
					Description: `url where stack is deployed`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_Stack
}

func Gql__input_ListStackResponse() *graphql.InputObject {
	if gql__input_ListStackResponse == nil {
		gql__input_ListStackResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListStackResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"stacks": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Stack()),
				},
			},
		})
	}
	return gql__input_ListStackResponse
}

func Gql__input_ListStackRequest() *graphql.InputObject {
	if gql__input_ListStackRequest == nil {
		gql__input_ListStackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListStackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ListStackRequest
}

func Gql__input_ListStackBuildResponse() *graphql.InputObject {
	if gql__input_ListStackBuildResponse == nil {
		gql__input_ListStackBuildResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListStackBuildResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"stack_builds": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_StackBuild()),
				},
			},
		})
	}
	return gql__input_ListStackBuildResponse
}

func Gql__input_ListStackBuildRequest() *graphql.InputObject {
	if gql__input_ListStackBuildRequest == nil {
		gql__input_ListStackBuildRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListStackBuildRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"stack_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ListStackBuildRequest
}

func Gql__input_GetStackRequest() *graphql.InputObject {
	if gql__input_GetStackRequest == nil {
		gql__input_GetStackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetStackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GetStackRequest
}

func Gql__input_GetStackBuildRequest() *graphql.InputObject {
	if gql__input_GetStackBuildRequest == nil {
		gql__input_GetStackBuildRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetStackBuildRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GetStackBuildRequest
}

func Gql__input_DeleteStackRequest() *graphql.InputObject {
	if gql__input_DeleteStackRequest == nil {
		gql__input_DeleteStackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_DeleteStackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_DeleteStackRequest
}

func Gql__input_DeleteStackBuildRequest() *graphql.InputObject {
	if gql__input_DeleteStackBuildRequest == nil {
		gql__input_DeleteStackBuildRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_DeleteStackBuildRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"delete_physical": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_DeleteStackBuildRequest
}

func Gql__input_CreateStackRequest() *graphql.InputObject {
	if gql__input_CreateStackRequest == nil {
		gql__input_CreateStackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CreateStackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"stack": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Stack(),
				},
			},
		})
	}
	return gql__input_CreateStackRequest
}

func Gql__input_CreateStackBuildRequest() *graphql.InputObject {
	if gql__input_CreateStackBuildRequest == nil {
		gql__input_CreateStackBuildRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CreateStackBuildRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"stack_build": &graphql.InputObjectFieldConfig{
					Type: Gql__input_StackBuild(),
				},
			},
		})
	}
	return gql__input_CreateStackBuildRequest
}

// graphql__resolver_Stacks is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_Stacks struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_Stacks creates pointer of service struct
func new_graphql_resolver_Stacks(conn *grpc.ClientConn) *graphql__resolver_Stacks {
	return &graphql__resolver_Stacks{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_Stacks) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_Stacks) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"stack": &graphql.Field{
			Type: Gql__type_Stack(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetStackRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for stack")
				}
				client := NewStacksClient(conn)
				resp, err := client.GetStack(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetStack")
				}
				return resp, nil
			},
		},
		"stacks": &graphql.Field{
			Type: Gql__type_ListStackResponse(),
			Args: graphql.FieldConfigArgument{
				"account_id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ListStackRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for stacks")
				}
				client := NewStacksClient(conn)
				resp, err := client.ListStack(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC ListStack")
				}
				return resp, nil
			},
		},
		"stackBuild": &graphql.Field{
			Type: Gql__type_StackBuild(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetStackBuildRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for stackBuild")
				}
				client := NewStacksClient(conn)
				resp, err := client.GetStackBuild(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetStackBuild")
				}
				return resp, nil
			},
		},
		"stacksBuilds": &graphql.Field{
			Type: Gql__type_ListStackBuildResponse(),
			Args: graphql.FieldConfigArgument{
				"stack_id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ListStackBuildRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for stacksBuilds")
				}
				client := NewStacksClient(conn)
				resp, err := client.ListStackBuild(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC ListStackBuild")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_Stacks) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createStack": &graphql.Field{
			Type: Gql__type_Stack(),
			Args: graphql.FieldConfigArgument{
				"stack": &graphql.ArgumentConfig{
					Type: Gql__input_Stack(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateStackRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createStack")
				}
				client := NewStacksClient(conn)
				resp, err := client.CreateStack(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreateStack")
				}
				return resp, nil
			},
		},

		"updateStack": &graphql.Field{
			Type: Gql__type_Stack(),
			Args: graphql.FieldConfigArgument{
				"stack": &graphql.ArgumentConfig{
					Type: Gql__input_Stack(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req UpdateStackRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for updateStack")
				}
				client := NewStacksClient(conn)
				resp, err := client.UpdateStack(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC UpdateStack")
				}
				return resp, nil
			},
		},

		"deleteStack": &graphql.Field{
			Type: gql_ptypes_empty.Gql__type_Empty(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeleteStackRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for deleteStack")
				}
				client := NewStacksClient(conn)
				resp, err := client.DeleteStack(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC DeleteStack")
				}
				return resp, nil
			},
		},

		"createStackBuild": &graphql.Field{
			Type: Gql__type_StackBuild(),
			Args: graphql.FieldConfigArgument{
				"stack_build": &graphql.ArgumentConfig{
					Type: Gql__input_StackBuild(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateStackBuildRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createStackBuild")
				}
				client := NewStacksClient(conn)
				resp, err := client.CreateStackBuild(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreateStackBuild")
				}
				return resp, nil
			},
		},

		"deleteStackBuild": &graphql.Field{
			Type: gql_ptypes_empty.Gql__type_Empty(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"delete_physical": &graphql.ArgumentConfig{
					Type: graphql.Boolean,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeleteStackBuildRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for deleteStackBuild")
				}
				client := NewStacksClient(conn)
				resp, err := client.DeleteStackBuild(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC DeleteStackBuild")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterStacksGraphqlHandler with *grpc.ClientConn manually.
func RegisterStacksGraphql(mux *runtime.ServeMux) error {
	return RegisterStacksGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service Stacks {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterStacksGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_Stacks(conn))
}
