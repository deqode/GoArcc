// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: pb/stack.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/ysugimoto/grpc-graphql-gateway/graphql"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ENUMS
type StackEnvironment int32

const (
	StackEnvironment_development StackEnvironment = 0
	StackEnvironment_production  StackEnvironment = 1
)

// Enum value maps for StackEnvironment.
var (
	StackEnvironment_name = map[int32]string{
		0: "development",
		1: "production",
	}
	StackEnvironment_value = map[string]int32{
		"development": 0,
		"production":  1,
	}
)

func (x StackEnvironment) Enum() *StackEnvironment {
	p := new(StackEnvironment)
	*p = x
	return p
}

func (x StackEnvironment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StackEnvironment) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_stack_proto_enumTypes[0].Descriptor()
}

func (StackEnvironment) Type() protoreflect.EnumType {
	return &file_pb_stack_proto_enumTypes[0]
}

func (x StackEnvironment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StackEnvironment.Descriptor instead.
func (StackEnvironment) EnumDescriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{0}
}

type StackType int32

const (
	StackType_go     StackType = 0
	StackType_ruby   StackType = 1
	StackType_node   StackType = 2
	StackType_python StackType = 3
)

// Enum value maps for StackType.
var (
	StackType_name = map[int32]string{
		0: "go",
		1: "ruby",
		2: "node",
		3: "python",
	}
	StackType_value = map[string]int32{
		"go":     0,
		"ruby":   1,
		"node":   2,
		"python": 3,
	}
)

func (x StackType) Enum() *StackType {
	p := new(StackType)
	*p = x
	return p
}

func (x StackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StackType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_stack_proto_enumTypes[1].Descriptor()
}

func (StackType) Type() protoreflect.EnumType {
	return &file_pb_stack_proto_enumTypes[1]
}

func (x StackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StackType.Descriptor instead.
func (StackType) EnumDescriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{1}
}

type StackStatus int32

const (
	StackStatus_ReadyForDeployment StackStatus = 0
	StackStatus_deployed           StackStatus = 1
	StackStatus_error              StackStatus = 2
)

// Enum value maps for StackStatus.
var (
	StackStatus_name = map[int32]string{
		0: "ReadyForDeployment",
		1: "deployed",
		2: "error",
	}
	StackStatus_value = map[string]int32{
		"ReadyForDeployment": 0,
		"deployed":           1,
		"error":              2,
	}
)

func (x StackStatus) Enum() *StackStatus {
	p := new(StackStatus)
	*p = x
	return p
}

func (x StackStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StackStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_stack_proto_enumTypes[2].Descriptor()
}

func (StackStatus) Type() protoreflect.EnumType {
	return &file_pb_stack_proto_enumTypes[2]
}

func (x StackStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StackStatus.Descriptor instead.
func (StackStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{2}
}

type StackBuildStatus int32

const (
	StackBuildStatus_failed    StackBuildStatus = 0
	StackBuildStatus_pending   StackBuildStatus = 1
	StackBuildStatus_succeeded StackBuildStatus = 2
)

// Enum value maps for StackBuildStatus.
var (
	StackBuildStatus_name = map[int32]string{
		0: "failed",
		1: "pending",
		2: "succeeded",
	}
	StackBuildStatus_value = map[string]int32{
		"failed":    0,
		"pending":   1,
		"succeeded": 2,
	}
)

func (x StackBuildStatus) Enum() *StackBuildStatus {
	p := new(StackBuildStatus)
	*p = x
	return p
}

func (x StackBuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StackBuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_stack_proto_enumTypes[3].Descriptor()
}

func (StackBuildStatus) Type() protoreflect.EnumType {
	return &file_pb_stack_proto_enumTypes[3]
}

func (x StackBuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StackBuildStatus.Descriptor instead.
func (StackBuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{3}
}

type Stack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auto generated
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the stack
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// slug of the stack
	Slug string `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	// account id of stack
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// cloud_connection_id required to identify cloud provider
	CloudConnectionId string `protobuf:"bytes,5,opt,name=cloud_connection_id,json=cloudConnectionId,proto3" json:"cloud_connection_id,omitempty"`
	// vcs_connection_id of user vcs
	VcsConnectionId string `protobuf:"bytes,6,opt,name=vcs_connection_id,json=vcsConnectionId,proto3" json:"vcs_connection_id,omitempty"`
	// git url
	GitUrl string `protobuf:"bytes,7,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	// git branch
	GitBranch string `protobuf:"bytes,8,opt,name=git_branch,json=gitBranch,proto3" json:"git_branch,omitempty"`
	// dev or production
	Environment StackEnvironment `protobuf:"varint,9,opt,name=environment,proto3,enum=alfred.stack.v1.StackEnvironment" json:"environment,omitempty"`
	// stack type will be go, ruby, node etc
	StackType StackType `protobuf:"varint,10,opt,name=stack_type,json=stackType,proto3,enum=alfred.stack.v1.StackType" json:"stack_type,omitempty"`
	// archived date
	ArchivedAt *timestamp.Timestamp `protobuf:"bytes,11,opt,name=archived_at,json=archivedAt,proto3" json:"archived_at,omitempty"`
	// stack released date
	ReleasedAt *timestamp.Timestamp `protobuf:"bytes,12,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty"`
	// status of stack deployed, failed,
	Status StackStatus `protobuf:"varint,13,opt,name=status,proto3,enum=alfred.stack.v1.StackStatus" json:"status,omitempty"`
	// url where stack is deployed
	WebUrl string `protobuf:"bytes,14,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *Stack) Reset() {
	*x = Stack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack) ProtoMessage() {}

func (x *Stack) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack.ProtoReflect.Descriptor instead.
func (*Stack) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{0}
}

func (x *Stack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stack) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Stack) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Stack) GetCloudConnectionId() string {
	if x != nil {
		return x.CloudConnectionId
	}
	return ""
}

func (x *Stack) GetVcsConnectionId() string {
	if x != nil {
		return x.VcsConnectionId
	}
	return ""
}

func (x *Stack) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *Stack) GetGitBranch() string {
	if x != nil {
		return x.GitBranch
	}
	return ""
}

func (x *Stack) GetEnvironment() StackEnvironment {
	if x != nil {
		return x.Environment
	}
	return StackEnvironment_development
}

func (x *Stack) GetStackType() StackType {
	if x != nil {
		return x.StackType
	}
	return StackType_go
}

func (x *Stack) GetArchivedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Stack) GetReleasedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedAt
	}
	return nil
}

func (x *Stack) GetStatus() StackStatus {
	if x != nil {
		return x.Status
	}
	return StackStatus_ReadyForDeployment
}

func (x *Stack) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type CreateStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack *Stack `protobuf:"bytes,2,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *CreateStackRequest) Reset() {
	*x = CreateStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackRequest) ProtoMessage() {}

func (x *CreateStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackRequest.ProtoReflect.Descriptor instead.
func (*CreateStackRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{1}
}

func (x *CreateStackRequest) GetStack() *Stack {
	if x != nil {
		return x.Stack
	}
	return nil
}

type DeleteStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteStackRequest) Reset() {
	*x = DeleteStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStackRequest) ProtoMessage() {}

func (x *DeleteStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStackRequest.ProtoReflect.Descriptor instead.
func (*DeleteStackRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteStackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack *Stack `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *UpdateStackRequest) Reset() {
	*x = UpdateStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStackRequest) ProtoMessage() {}

func (x *UpdateStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStackRequest.ProtoReflect.Descriptor instead.
func (*UpdateStackRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStackRequest) GetStack() *Stack {
	if x != nil {
		return x.Stack
	}
	return nil
}

type GetStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStackRequest) Reset() {
	*x = GetStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStackRequest) ProtoMessage() {}

func (x *GetStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStackRequest.ProtoReflect.Descriptor instead.
func (*GetStackRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{4}
}

func (x *GetStackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *ListStackRequest) Reset() {
	*x = ListStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackRequest) ProtoMessage() {}

func (x *ListStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackRequest.ProtoReflect.Descriptor instead.
func (*ListStackRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{5}
}

func (x *ListStackRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ListStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stacks []*Stack `protobuf:"bytes,1,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *ListStackResponse) Reset() {
	*x = ListStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackResponse) ProtoMessage() {}

func (x *ListStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackResponse.ProtoReflect.Descriptor instead.
func (*ListStackResponse) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{6}
}

func (x *ListStackResponse) GetStacks() []*Stack {
	if x != nil {
		return x.Stacks
	}
	return nil
}

// service stack_builds
type StackBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auto generated
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// every build belong to an stack
	StackId string `protobuf:"bytes,2,opt,name=stack_id,json=stackId,proto3" json:"stack_id,omitempty"`
	// failed , pending, succeeded
	Status StackBuildStatus `protobuf:"varint,3,opt,name=status,proto3,enum=alfred.stack.v1.StackBuildStatus" json:"status,omitempty"`
	// slug of the stack_build
	Slug string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	// account id of stack_build
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// output centrifugo url, used by frontend to show live logs to user
	LogStreamChannel string `protobuf:"bytes,6,opt,name=log_stream_channel,json=logStreamChannel,proto3" json:"log_stream_channel,omitempty"`
	// stack_build completed date
	CompletedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *StackBuild) Reset() {
	*x = StackBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackBuild) ProtoMessage() {}

func (x *StackBuild) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackBuild.ProtoReflect.Descriptor instead.
func (*StackBuild) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{7}
}

func (x *StackBuild) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StackBuild) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

func (x *StackBuild) GetStatus() StackBuildStatus {
	if x != nil {
		return x.Status
	}
	return StackBuildStatus_failed
}

func (x *StackBuild) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *StackBuild) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *StackBuild) GetLogStreamChannel() string {
	if x != nil {
		return x.LogStreamChannel
	}
	return ""
}

func (x *StackBuild) GetCompletedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type CreateStackBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackBuild *StackBuild `protobuf:"bytes,2,opt,name=stack_build,json=stackBuild,proto3" json:"stack_build,omitempty"`
}

func (x *CreateStackBuildRequest) Reset() {
	*x = CreateStackBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStackBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStackBuildRequest) ProtoMessage() {}

func (x *CreateStackBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStackBuildRequest.ProtoReflect.Descriptor instead.
func (*CreateStackBuildRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{8}
}

func (x *CreateStackBuildRequest) GetStackBuild() *StackBuild {
	if x != nil {
		return x.StackBuild
	}
	return nil
}

type DeleteStackBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeletePhysical bool   `protobuf:"varint,2,opt,name=delete_physical,json=deletePhysical,proto3" json:"delete_physical,omitempty"`
}

func (x *DeleteStackBuildRequest) Reset() {
	*x = DeleteStackBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStackBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStackBuildRequest) ProtoMessage() {}

func (x *DeleteStackBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStackBuildRequest.ProtoReflect.Descriptor instead.
func (*DeleteStackBuildRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteStackBuildRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteStackBuildRequest) GetDeletePhysical() bool {
	if x != nil {
		return x.DeletePhysical
	}
	return false
}

type GetStackBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStackBuildRequest) Reset() {
	*x = GetStackBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStackBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStackBuildRequest) ProtoMessage() {}

func (x *GetStackBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStackBuildRequest.ProtoReflect.Descriptor instead.
func (*GetStackBuildRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{10}
}

func (x *GetStackBuildRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListStackBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId,proto3" json:"stack_id,omitempty"`
}

func (x *ListStackBuildRequest) Reset() {
	*x = ListStackBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackBuildRequest) ProtoMessage() {}

func (x *ListStackBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackBuildRequest.ProtoReflect.Descriptor instead.
func (*ListStackBuildRequest) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{11}
}

func (x *ListStackBuildRequest) GetStackId() string {
	if x != nil {
		return x.StackId
	}
	return ""
}

type ListStackBuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackBuilds []*StackBuild `protobuf:"bytes,1,rep,name=stack_builds,json=stackBuilds,proto3" json:"stack_builds,omitempty"`
}

func (x *ListStackBuildResponse) Reset() {
	*x = ListStackBuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_stack_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStackBuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStackBuildResponse) ProtoMessage() {}

func (x *ListStackBuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_stack_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStackBuildResponse.ProtoReflect.Descriptor instead.
func (*ListStackBuildResponse) Descriptor() ([]byte, []int) {
	return file_pb_stack_proto_rawDescGZIP(), []int{12}
}

func (x *ListStackBuildResponse) GetStackBuilds() []*StackBuild {
	if x != nil {
		return x.StackBuilds
	}
	return nil
}

var File_pb_stack_proto protoreflect.FileDescriptor

var file_pb_stack_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x05, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x11, 0x76, 0x63, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0f, 0x76, 0x63,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x66,
	0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x57, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22,
	0x5c, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x30, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x2a, 0x33, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x67, 0x6f, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x75, 0x62, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x10,
	0x03, 0x2a, 0x3e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x02, 0x2a, 0x3a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x02, 0x32, 0xf1, 0x09,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x7f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61,
	0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0xba, 0x43, 0x0f, 0x08, 0x01, 0x12, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x7f, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x1a, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0xba, 0x43, 0x0f, 0x08, 0x01, 0x12, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x70, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0xba, 0x43, 0x07, 0x12, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x81, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x61,
	0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x43,
	0x0f, 0x08, 0x01, 0x12, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x7b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e,
	0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0xba, 0x43, 0x08, 0x12, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x9f, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x28, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61,
	0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0xba, 0x43, 0x14, 0x08, 0x01, 0x12, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x90, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x25, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65,
	0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67,
	0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0xba, 0x43, 0x0c, 0x12, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x28, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64,
	0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x2a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0xba, 0x43, 0x14, 0x08, 0x01, 0x12,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x9d, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x6c, 0x66, 0x72, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0xba, 0x43, 0x0e, 0x12, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_stack_proto_rawDescOnce sync.Once
	file_pb_stack_proto_rawDescData = file_pb_stack_proto_rawDesc
)

func file_pb_stack_proto_rawDescGZIP() []byte {
	file_pb_stack_proto_rawDescOnce.Do(func() {
		file_pb_stack_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_stack_proto_rawDescData)
	})
	return file_pb_stack_proto_rawDescData
}

var file_pb_stack_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pb_stack_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pb_stack_proto_goTypes = []interface{}{
	(StackEnvironment)(0),           // 0: alfred.stack.v1.StackEnvironment
	(StackType)(0),                  // 1: alfred.stack.v1.StackType
	(StackStatus)(0),                // 2: alfred.stack.v1.StackStatus
	(StackBuildStatus)(0),           // 3: alfred.stack.v1.StackBuildStatus
	(*Stack)(nil),                   // 4: alfred.stack.v1.Stack
	(*CreateStackRequest)(nil),      // 5: alfred.stack.v1.CreateStackRequest
	(*DeleteStackRequest)(nil),      // 6: alfred.stack.v1.DeleteStackRequest
	(*UpdateStackRequest)(nil),      // 7: alfred.stack.v1.UpdateStackRequest
	(*GetStackRequest)(nil),         // 8: alfred.stack.v1.GetStackRequest
	(*ListStackRequest)(nil),        // 9: alfred.stack.v1.ListStackRequest
	(*ListStackResponse)(nil),       // 10: alfred.stack.v1.ListStackResponse
	(*StackBuild)(nil),              // 11: alfred.stack.v1.StackBuild
	(*CreateStackBuildRequest)(nil), // 12: alfred.stack.v1.CreateStackBuildRequest
	(*DeleteStackBuildRequest)(nil), // 13: alfred.stack.v1.DeleteStackBuildRequest
	(*GetStackBuildRequest)(nil),    // 14: alfred.stack.v1.GetStackBuildRequest
	(*ListStackBuildRequest)(nil),   // 15: alfred.stack.v1.ListStackBuildRequest
	(*ListStackBuildResponse)(nil),  // 16: alfred.stack.v1.ListStackBuildResponse
	(*timestamp.Timestamp)(nil),     // 17: google.protobuf.Timestamp
	(*empty.Empty)(nil),             // 18: google.protobuf.Empty
}
var file_pb_stack_proto_depIdxs = []int32{
	0,  // 0: alfred.stack.v1.Stack.environment:type_name -> alfred.stack.v1.StackEnvironment
	1,  // 1: alfred.stack.v1.Stack.stack_type:type_name -> alfred.stack.v1.StackType
	17, // 2: alfred.stack.v1.Stack.archived_at:type_name -> google.protobuf.Timestamp
	17, // 3: alfred.stack.v1.Stack.released_at:type_name -> google.protobuf.Timestamp
	2,  // 4: alfred.stack.v1.Stack.status:type_name -> alfred.stack.v1.StackStatus
	4,  // 5: alfred.stack.v1.CreateStackRequest.stack:type_name -> alfred.stack.v1.Stack
	4,  // 6: alfred.stack.v1.UpdateStackRequest.stack:type_name -> alfred.stack.v1.Stack
	4,  // 7: alfred.stack.v1.ListStackResponse.stacks:type_name -> alfred.stack.v1.Stack
	3,  // 8: alfred.stack.v1.StackBuild.status:type_name -> alfred.stack.v1.StackBuildStatus
	17, // 9: alfred.stack.v1.StackBuild.completed_at:type_name -> google.protobuf.Timestamp
	11, // 10: alfred.stack.v1.CreateStackBuildRequest.stack_build:type_name -> alfred.stack.v1.StackBuild
	11, // 11: alfred.stack.v1.ListStackBuildResponse.stack_builds:type_name -> alfred.stack.v1.StackBuild
	5,  // 12: alfred.stack.v1.Stacks.CreateStack:input_type -> alfred.stack.v1.CreateStackRequest
	7,  // 13: alfred.stack.v1.Stacks.UpdateStack:input_type -> alfred.stack.v1.UpdateStackRequest
	8,  // 14: alfred.stack.v1.Stacks.GetStack:input_type -> alfred.stack.v1.GetStackRequest
	6,  // 15: alfred.stack.v1.Stacks.DeleteStack:input_type -> alfred.stack.v1.DeleteStackRequest
	9,  // 16: alfred.stack.v1.Stacks.ListStack:input_type -> alfred.stack.v1.ListStackRequest
	12, // 17: alfred.stack.v1.Stacks.CreateStackBuild:input_type -> alfred.stack.v1.CreateStackBuildRequest
	14, // 18: alfred.stack.v1.Stacks.GetStackBuild:input_type -> alfred.stack.v1.GetStackBuildRequest
	13, // 19: alfred.stack.v1.Stacks.DeleteStackBuild:input_type -> alfred.stack.v1.DeleteStackBuildRequest
	15, // 20: alfred.stack.v1.Stacks.ListStackBuild:input_type -> alfred.stack.v1.ListStackBuildRequest
	4,  // 21: alfred.stack.v1.Stacks.CreateStack:output_type -> alfred.stack.v1.Stack
	4,  // 22: alfred.stack.v1.Stacks.UpdateStack:output_type -> alfred.stack.v1.Stack
	4,  // 23: alfred.stack.v1.Stacks.GetStack:output_type -> alfred.stack.v1.Stack
	18, // 24: alfred.stack.v1.Stacks.DeleteStack:output_type -> google.protobuf.Empty
	10, // 25: alfred.stack.v1.Stacks.ListStack:output_type -> alfred.stack.v1.ListStackResponse
	11, // 26: alfred.stack.v1.Stacks.CreateStackBuild:output_type -> alfred.stack.v1.StackBuild
	11, // 27: alfred.stack.v1.Stacks.GetStackBuild:output_type -> alfred.stack.v1.StackBuild
	18, // 28: alfred.stack.v1.Stacks.DeleteStackBuild:output_type -> google.protobuf.Empty
	16, // 29: alfred.stack.v1.Stacks.ListStackBuild:output_type -> alfred.stack.v1.ListStackBuildResponse
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pb_stack_proto_init() }
func file_pb_stack_proto_init() {
	if File_pb_stack_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_stack_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStackBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStackBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStackBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_stack_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStackBuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_stack_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_stack_proto_goTypes,
		DependencyIndexes: file_pb_stack_proto_depIdxs,
		EnumInfos:         file_pb_stack_proto_enumTypes,
		MessageInfos:      file_pb_stack_proto_msgTypes,
	}.Build()
	File_pb_stack_proto = out.File
	file_pb_stack_proto_rawDesc = nil
	file_pb_stack_proto_goTypes = nil
	file_pb_stack_proto_depIdxs = nil
}
