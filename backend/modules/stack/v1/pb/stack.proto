syntax = "proto3";
package alfred.stack.v1;

option go_package = "/pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

// A Stack represent a program that you would like to deploy and run on your cloud provider
// A StackBuild represent a ongoing process of stack deployment
service Stacks{

    //CreateStack create a new stack correspond to an account
    rpc CreateStack(CreateStackRequest) returns (Stack){
        option (google.api.http) = {
            post: "/v1/stack/create-stack"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "createStack"
        };
    };

    // UpdateStack update existing fields in stack
    rpc UpdateStack(UpdateStackRequest) returns (Stack){
        option (google.api.http) = {
            put: "/v1/stack/update-stack"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "updateStack"
        };
    }

    // GetStack get a existing stack
    rpc GetStack(GetStackRequest) returns (Stack){
        option (google.api.http) = {
            get: "/v1/stack/get-stack/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stack"
        };
    }

    // DeleteStack delete an existing stack
    rpc DeleteStack(DeleteStackRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stack/delete-stack/{id}"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "deleteStack"
        };
    }

    // ListStack list existing stacks
    rpc ListStack(ListStackRequest) returns (ListStackResponse){
        option (google.api.http) = {
            get: "/v1/stack/list-stack"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stacks"
        };
    }

    // Stack Builds
    //CreateStackBuild create new stack build
    rpc CreateStackBuild(CreateStackBuildRequest) returns (StackBuild){
        option (google.api.http) = {
            post: "/v1/stack-build/create-stack-build"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "createStackBuild"
        };
    };

    //GetStackBuild get information of existing stack build
    rpc GetStackBuild(GetStackBuildRequest) returns (StackBuild){
        option (google.api.http) = {
            get: "/v1/stack-build/get-stack-build/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stackBuild"
        };
    }

    //DeleteStackBuild deletes existing stack build
    rpc DeleteStackBuild(DeleteStackBuildRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stack-build/delete-stack-build/{id}"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "deleteStackBuild"
        };
    }

    // ListStackBuild list all the existing builds of a stack
    rpc ListStackBuild(ListStackBuildRequest) returns (ListStackBuildResponse){
        option (google.api.http) = {
            get: "/v1/stack-build/list-stack-builds"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stacksBuilds"
        };
    }
}

message Stack{
    // auto generated
    string id = 1[(validate.rules).string.uuid = true];
    // name of the stack
    string name = 2 [(validate.rules).string = {
        min_len: 1 max_len: 100,
        pattern:"^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$"
    }];
    // slug of the stack
    string slug = 3 [(validate.rules).string = {
        min_len: 1 max_len: 100,
        pattern:"^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$"
    }];
    // account id of stack
    string account_id = 4 [(validate.rules).string.uuid = true];
    // cloud_connection_id required to identify cloud provider
    string cloud_connection_id = 5 [(validate.rules).string.uuid = true];
    // vcs_connection_id of user vcs
    string vcs_connection_id = 6 [(validate.rules).string.uuid = true];
    // git url
    string git_url = 7 [(validate.rules).string.uri = true];
    // git branch
    string git_branch = 8 [(validate.rules).string.min_len = 1];
    // dev or production
    StackEnvironment environment = 9;
    // stack type will be go, ruby, node etc
    StackType stack_type = 10;
    // archived date
    google.protobuf.Timestamp archived_at = 11;
    // stack released date
    google.protobuf.Timestamp released_at = 12;
    // status of stack deployed, failed,
    StackStatus status = 13;
    // url where stack is deployed
    string web_url = 14 [(validate.rules).string.uri = true];
}

message CreateStackRequest {
    Stack stack = 2;
}

message DeleteStackRequest {
    string id = 1 [(validate.rules).string.uuid = true];
}

message UpdateStackRequest {
    Stack stack = 1 [(validate.rules).message.required = true];
}

message GetStackRequest {
    string id = 1 [(validate.rules).string.uuid = true];
}

message ListStackRequest {
    string account_id = 1 [(validate.rules).string.uuid = true];
}
message ListStackResponse {
    repeated Stack stacks = 1;
}

// service stack_builds
message StackBuild{
    // auto generated
    string id = 1 [(validate.rules).string.uuid = true];
    // every build belong to an stack
    string stack_id = 2[(validate.rules).string.uuid = true];
    // failed , pending, succeeded
    StackBuildStatus status = 3;
    // slug of the stack_build
    string slug = 4 [(validate.rules).string = {
        min_len: 1 max_len: 100,
        pattern:"^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$"
    }];
    // account id of stack_build
    string account_id = 5 [(validate.rules).string.uuid = true];
    // output centrifugo url, used by frontend to show live logs to user
    string log_stream_channel = 6 ;
    // stack_build completed date
    google.protobuf.Timestamp completed_at = 7;
}

message CreateStackBuildRequest {
    StackBuild stack_build = 2;
}

message DeleteStackBuildRequest {
    string id = 1 [(validate.rules).string.uuid = true];
    bool delete_physical = 2;
}

message GetStackBuildRequest {
    string id = 1 [(validate.rules).string.uuid = true];
}

message ListStackBuildRequest {
    string stack_id = 1 [(validate.rules).string.uuid = true];
}
message ListStackBuildResponse {
    repeated StackBuild stack_builds = 1;
}

// ENUMS
enum StackEnvironment{
    development = 0;
    production = 1;
}

enum StackType{
    go = 0;
    ruby = 1;
    node = 2;
    python = 3;
}

enum StackStatus{
    ReadyForDeployment = 0;
    deployed = 1;
    error = 2;
}

enum StackBuildStatus{
    failed = 0;
    pending = 1;
    succeeded = 2;
}
