syntax = "proto3";
package alfred.stack.v1;

option go_package = "/pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

service Stacks{
    rpc CreateStack(CreateStackRequest) returns (Stack){
        option (google.api.http) = {
            post: "/v1/stack/create-stack"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "createStack"
        };
    };
    rpc UpdateStack(UpdateStackRequest) returns (Stack){
        option (google.api.http) = {
            put: "/v1/stack/update-stack"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "updateStack"
        };
    }
    rpc GetStack(GetStackRequest) returns (Stack){
        option (google.api.http) = {
            get: "/v1/stack/get-stack/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stack"
        };
    }
    rpc DeleteStack(DeleteStackRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stack/delete-stack/{id}"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "deleteStack"
        };
    }
    rpc ListStack(ListStackRequest) returns (ListStackResponse){
        option (google.api.http) = {
            get: "/v1/stack/list-stack"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stacks"
        };
    }

    // Stack Builds
    rpc CreateStackBuild(CreateStackBuildRequest) returns (StackBuild){
        option (google.api.http) = {
            post: "/v1/stack-build/create-stack-build"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "createStackBuild"
        };
    };
    rpc GetStackBuild(GetStackBuildRequest) returns (StackBuild){
        option (google.api.http) = {
            get: "/v1/stack-build/get-stack-build/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stackBuild"
        };
    }
    rpc DeleteStackBuild(DeleteStackBuildRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stack-build/delete-stack-build/{id}"
        };
        option (graphql.schema) = {
            type: MUTATION
            name: "deleteStackBuild"
        };
    }
    rpc ListStackBuild(ListStackBuildRequest) returns (ListStackBuildResponse){
        option (google.api.http) = {
            get: "/v1/stack-build/list-stack-builds"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "stacksBuilds"
        };
    }
}
message Stack{
    // auto generated
    string id = 1[(validate.rules).string.uuid = true];
    // name of the stack
    string name = 2 [(validate.rules).string = {min_len: 1 max_len: 100}];
    // slug of the stack
    string slug = 3 [(validate.rules).string.max_len = 100];
    // account id of stack
    string account_id = 4 [(validate.rules).string.uuid = true];
    // git url
    string git_url = 5 [(validate.rules).string.min_len = 10];
    // git branch
    string git_branch = 6 [(validate.rules).string.min_len = 1];
    // username of user vcs
    string user_name = 7;
    // dev or production
    StackEnvironment environment = 8;
    // stack type will be go, ruby, node etc
    string stack_type = 9;
    // archived date
    google.protobuf.Timestamp archived_at = 10;
    // stack released date
    google.protobuf.Timestamp released_at = 11;
    // status of stack deployed, failed,
    string status = 12;
    // url where stack is deployed
    string web_url = 13;
}

enum StackEnvironment{
    development = 0;
    production = 1;
}

message CreateStackRequest {
    Stack stack = 2;
}

message DeleteStackRequest {
    string id = 1;
}

message UpdateStackRequest {
    Stack stack = 1;
}

message GetStackRequest {
    string id = 1;
}

message ListStackRequest {
    string account_id = 1;
}
message ListStackResponse {
    repeated Stack stacks = 1;
}

// service stack_builds
message StackBuild{
    // auto generated
    string id = 1[(validate.rules).string.uuid = true];
    // every build belong to an stack
    string stack_id = 2[(validate.rules).string.uuid = true];
    // failed , pending, succeeded
    string status = 3;
    // slug of the stack_build
    string slug = 4 [(validate.rules).string.max_len = 100];
    // account id of stack_build
    string account_id = 5 [(validate.rules).string.uuid = true];
    // output centrifugo url, used by frontend to show live logs to user
    string logs_stream_url = 6 ;
}

message CreateStackBuildRequest {
    StackBuild stack_build = 2;
}

message DeleteStackBuildRequest {
    string id = 1;
    bool delete_physical = 2;
}

message GetStackBuildRequest {
    string id = 1;
}

message ListStackBuildRequest {
    string stack_id = 1;
}
message ListStackBuildResponse {
    repeated StackBuild stack_builds = 1;
}
