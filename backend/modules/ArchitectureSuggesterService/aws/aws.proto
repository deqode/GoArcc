syntax = "proto3";
package pb;

option go_package = ".;pb";

import "google/api/annotation.proto";
import "include/graphql.proto";


//Endpoints will be added for future use
service AwsService {
    rpc GetAwsContainerServices(GetAwsContainerServicesRequest) returns (GetAwsContainerServicesResponse){
    option (google.api.http) = {
             get: "/v1/aws/get-aws-container-services"
        };
    option (graphql.schema) = {
        type: QUERY  // declare as Query
              name: "getAwsContainerServices" // query name
            };
        };
    rpc GetAwsLaunchTypes(GetAwsLaunchTypesRequest) returns (GetAwsLaunchTypesResponse) {
        option (google.api.http) = {
            get: "/v1/aws/get-aws-launch-types/{container_service}"
        };
        option (graphql.schema) = {
            type: QUERY  // declare as Query
            name: "getAwsLaunchTypes" // query name
        };
    };
    rpc GetAwsInstanceTypes(GetAwsInstanceTypesRequest) returns (GetAwsInstanceTypesResponse){
        option (google.api.http) = {
            get: "/v1/aws/get-aws-instance-types/{launch_type}"
        };
        option (graphql.schema) = {
            type: QUERY  // declare as Query
            name: "getAwsInstanceTypes" // query name
        };
    };

    rpc GetAwsMachineTypes(GetAwsMachineTypesRequest) returns (GetAwsMachineTypesResponse){
        option (google.api.http) = {
            get: "/v1/aws/get-aws-machine-types/{instance_type}"
        };
        option (graphql.schema) = {
            type: QUERY  // declare as Query
            name: "getAwsMachineTypes" // query name
        };
    };
}


message GetAwsMachineTypesRequest {
    string instance_type = 1;
    //global parent : like Ecs , Eks
    string parent = 2;
}



message GetAwsInstanceTypesRequest {
    string parent = 2;
    string launch_type = 1;
}


message GetAwsMachineTypesResponse {
    repeated string machine_types = 1;
    repeated MachineConfig machine_config = 2;
}



message GetAwsInstanceTypesResponse {
    repeated string instance_types = 1;
}

message GetAwsLaunchTypesRequest {
    string container_service = 1;
}

message GetAwsLaunchTypesResponse {
    repeated string launch_type  = 1;
}


message GetAwsContainerServicesRequest {
  string nothing = 1;
}

message GetAwsContainerServicesResponse {
    repeated  string amazon_container_services = 1;
}



message  MachineConfig {
    string parent = 1;
    string instance_size = 2;
    string v_cpu = 3;
    string memory_in_gib = 4;
    string instance_storage = 5;
    string instance_storage_gib = 18;
    string network_bandwidth_gbpc = 6;
    string ebs_bandwidth_mbps = 7;
    string baseline_performance = 8;
    string cpu_credits_earned_hr = 9;
    string network_burst_bandwidth_gbps = 10;
    string ebs_burst_bandwidth_mbps = 11;
    string mem = 12;
    string mem_gib = 19;
    string network_performance = 13;
    string storage = 14;
    string storage_gb = 23;
    string network_performance_gib = 15;
    string network_bandwidth = 16;
    string ebs_bandwidth = 17;
    string gpu_mem_gib = 20;
    string gpu_mem = 21;
    string gpu_p2p = 22;
    string dedicated_ebs_bandwidth = 24;
    string local_storage = 25;
    string local_storage_gb = 26;

}
