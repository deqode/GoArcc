// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsServiceClient is the client API for AwsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsServiceClient interface {
	GetAwsContainerServices(ctx context.Context, in *GetAwsContainerServicesRequest, opts ...grpc.CallOption) (*GetAwsContainerServicesResponse, error)
	GetAwsLaunchTypes(ctx context.Context, in *GetAwsLaunchTypesRequest, opts ...grpc.CallOption) (*GetAwsLaunchTypesResponse, error)
	GetAwsInstanceTypes(ctx context.Context, in *GetAwsInstanceTypesRequest, opts ...grpc.CallOption) (*GetAwsInstanceTypesResponse, error)
	GetAwsMachineTypes(ctx context.Context, in *GetAwsMachineTypesRequest, opts ...grpc.CallOption) (*GetAwsMachineTypesResponse, error)
}

type awsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsServiceClient(cc grpc.ClientConnInterface) AwsServiceClient {
	return &awsServiceClient{cc}
}

func (c *awsServiceClient) GetAwsContainerServices(ctx context.Context, in *GetAwsContainerServicesRequest, opts ...grpc.CallOption) (*GetAwsContainerServicesResponse, error) {
	out := new(GetAwsContainerServicesResponse)
	err := c.cc.Invoke(ctx, "/pb.AwsService/GetAwsContainerServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServiceClient) GetAwsLaunchTypes(ctx context.Context, in *GetAwsLaunchTypesRequest, opts ...grpc.CallOption) (*GetAwsLaunchTypesResponse, error) {
	out := new(GetAwsLaunchTypesResponse)
	err := c.cc.Invoke(ctx, "/pb.AwsService/GetAwsLaunchTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServiceClient) GetAwsInstanceTypes(ctx context.Context, in *GetAwsInstanceTypesRequest, opts ...grpc.CallOption) (*GetAwsInstanceTypesResponse, error) {
	out := new(GetAwsInstanceTypesResponse)
	err := c.cc.Invoke(ctx, "/pb.AwsService/GetAwsInstanceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServiceClient) GetAwsMachineTypes(ctx context.Context, in *GetAwsMachineTypesRequest, opts ...grpc.CallOption) (*GetAwsMachineTypesResponse, error) {
	out := new(GetAwsMachineTypesResponse)
	err := c.cc.Invoke(ctx, "/pb.AwsService/GetAwsMachineTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsServiceServer is the server API for AwsService service.
// All implementations must embed UnimplementedAwsServiceServer
// for forward compatibility
type AwsServiceServer interface {
	GetAwsContainerServices(context.Context, *GetAwsContainerServicesRequest) (*GetAwsContainerServicesResponse, error)
	GetAwsLaunchTypes(context.Context, *GetAwsLaunchTypesRequest) (*GetAwsLaunchTypesResponse, error)
	GetAwsInstanceTypes(context.Context, *GetAwsInstanceTypesRequest) (*GetAwsInstanceTypesResponse, error)
	GetAwsMachineTypes(context.Context, *GetAwsMachineTypesRequest) (*GetAwsMachineTypesResponse, error)
	//mustEmbedUnimplementedAwsServiceServer()
}

// UnimplementedAwsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAwsServiceServer struct {
}

func (UnimplementedAwsServiceServer) GetAwsContainerServices(context.Context, *GetAwsContainerServicesRequest) (*GetAwsContainerServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsContainerServices not implemented")
}
func (UnimplementedAwsServiceServer) GetAwsLaunchTypes(context.Context, *GetAwsLaunchTypesRequest) (*GetAwsLaunchTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsLaunchTypes not implemented")
}
func (UnimplementedAwsServiceServer) GetAwsInstanceTypes(context.Context, *GetAwsInstanceTypesRequest) (*GetAwsInstanceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsInstanceTypes not implemented")
}
func (UnimplementedAwsServiceServer) GetAwsMachineTypes(context.Context, *GetAwsMachineTypesRequest) (*GetAwsMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsMachineTypes not implemented")
}
func (UnimplementedAwsServiceServer) mustEmbedUnimplementedAwsServiceServer() {}

// UnsafeAwsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsServiceServer will
// result in compilation errors.
type UnsafeAwsServiceServer interface {
	mustEmbedUnimplementedAwsServiceServer()
}

func RegisterAwsServiceServer(s grpc.ServiceRegistrar, srv AwsServiceServer) {
	s.RegisterService(&AwsService_ServiceDesc, srv)
}

func _AwsService_GetAwsContainerServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsContainerServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServiceServer).GetAwsContainerServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AwsService/GetAwsContainerServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServiceServer).GetAwsContainerServices(ctx, req.(*GetAwsContainerServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsService_GetAwsLaunchTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsLaunchTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServiceServer).GetAwsLaunchTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AwsService/GetAwsLaunchTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServiceServer).GetAwsLaunchTypes(ctx, req.(*GetAwsLaunchTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsService_GetAwsInstanceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsInstanceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServiceServer).GetAwsInstanceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AwsService/GetAwsInstanceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServiceServer).GetAwsInstanceTypes(ctx, req.(*GetAwsInstanceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsService_GetAwsMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServiceServer).GetAwsMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AwsService/GetAwsMachineTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServiceServer).GetAwsMachineTypes(ctx, req.(*GetAwsMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsService_ServiceDesc is the grpc.ServiceDesc for AwsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AwsService",
	HandlerType: (*AwsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAwsContainerServices",
			Handler:    _AwsService_GetAwsContainerServices_Handler,
		},
		{
			MethodName: "GetAwsLaunchTypes",
			Handler:    _AwsService_GetAwsLaunchTypes_Handler,
		},
		{
			MethodName: "GetAwsInstanceTypes",
			Handler:    _AwsService_GetAwsInstanceTypes_Handler,
		},
		{
			MethodName: "GetAwsMachineTypes",
			Handler:    _AwsService_GetAwsMachineTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aws.proto",
}
