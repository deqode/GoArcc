// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_empty "github.com/ysugimoto/grpc-graphql-gateway/ptypes/empty"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_UpdateCloudConnectionRequest  *graphql.Object      // message UpdateCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__type_GetCloudConnectionRequest     *graphql.Object      // message GetCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__type_DeleteCloudConnectionRequest  *graphql.Object      // message DeleteCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__type_CreateCloudConnectionRequest  *graphql.Object      // message CreateCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__type_CloudConnection               *graphql.Object      // message CloudConnection in pb/cloud-connection-service.proto
	gql__input_UpdateCloudConnectionRequest *graphql.InputObject // message UpdateCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__input_GetCloudConnectionRequest    *graphql.InputObject // message GetCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__input_DeleteCloudConnectionRequest *graphql.InputObject // message DeleteCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__input_CreateCloudConnectionRequest *graphql.InputObject // message CreateCloudConnectionRequest in pb/cloud-connection-service.proto
	gql__input_CloudConnection              *graphql.InputObject // message CloudConnection in pb/cloud-connection-service.proto
)

func Gql__type_UpdateCloudConnectionRequest() *graphql.Object {
	if gql__type_UpdateCloudConnectionRequest == nil {
		gql__type_UpdateCloudConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UpdateCloudConnectionRequest",
			Fields: graphql.Fields{
				"cloud_connection": &graphql.Field{
					Type: Gql__type_CloudConnection(),
				},
			},
		})
	}
	return gql__type_UpdateCloudConnectionRequest
}

func Gql__type_GetCloudConnectionRequest() *graphql.Object {
	if gql__type_GetCloudConnectionRequest == nil {
		gql__type_GetCloudConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetCloudConnectionRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GetCloudConnectionRequest
}

func Gql__type_DeleteCloudConnectionRequest() *graphql.Object {
	if gql__type_DeleteCloudConnectionRequest == nil {
		gql__type_DeleteCloudConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_DeleteCloudConnectionRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_DeleteCloudConnectionRequest
}

func Gql__type_CreateCloudConnectionRequest() *graphql.Object {
	if gql__type_CreateCloudConnectionRequest == nil {
		gql__type_CreateCloudConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CreateCloudConnectionRequest",
			Fields: graphql.Fields{
				"cloud_connection": &graphql.Field{
					Type: Gql__type_CloudConnection(),
				},
			},
		})
	}
	return gql__type_CreateCloudConnectionRequest
}

func Gql__type_CloudConnection() *graphql.Object {
	if gql__type_CloudConnection == nil {
		gql__type_CloudConnection = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CloudConnection",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `id generated by uuid`,
				},
				"client_id": &graphql.Field{
					Type:        graphql.String,
					Description: `stored in encrypted form`,
				},
				"client_secret": &graphql.Field{
					Type:        graphql.String,
					Description: `stored in encrypted form`,
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
				"scope": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
				"provider": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_CloudConnection
}

func Gql__input_UpdateCloudConnectionRequest() *graphql.InputObject {
	if gql__input_UpdateCloudConnectionRequest == nil {
		gql__input_UpdateCloudConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UpdateCloudConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"cloud_connection": &graphql.InputObjectFieldConfig{
					Type: Gql__input_CloudConnection(),
				},
			},
		})
	}
	return gql__input_UpdateCloudConnectionRequest
}

func Gql__input_GetCloudConnectionRequest() *graphql.InputObject {
	if gql__input_GetCloudConnectionRequest == nil {
		gql__input_GetCloudConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetCloudConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GetCloudConnectionRequest
}

func Gql__input_DeleteCloudConnectionRequest() *graphql.InputObject {
	if gql__input_DeleteCloudConnectionRequest == nil {
		gql__input_DeleteCloudConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_DeleteCloudConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_DeleteCloudConnectionRequest
}

func Gql__input_CreateCloudConnectionRequest() *graphql.InputObject {
	if gql__input_CreateCloudConnectionRequest == nil {
		gql__input_CreateCloudConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CreateCloudConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"cloud_connection": &graphql.InputObjectFieldConfig{
					Type: Gql__input_CloudConnection(),
				},
			},
		})
	}
	return gql__input_CreateCloudConnectionRequest
}

func Gql__input_CloudConnection() *graphql.InputObject {
	if gql__input_CloudConnection == nil {
		gql__input_CloudConnection = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CloudConnection",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `id generated by uuid`,
					Type:        graphql.String,
				},
				"client_id": &graphql.InputObjectFieldConfig{
					Description: `stored in encrypted form`,
					Type:        graphql.String,
				},
				"client_secret": &graphql.InputObjectFieldConfig{
					Description: `stored in encrypted form`,
					Type:        graphql.String,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"scope": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
				"provider": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_CloudConnection
}

// graphql__resolver_CloudConnectionService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_CloudConnectionService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_CloudConnectionService creates pointer of service struct
func new_graphql_resolver_CloudConnectionService(conn *grpc.ClientConn) *graphql__resolver_CloudConnectionService {
	return &graphql__resolver_CloudConnectionService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_CloudConnectionService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_CloudConnectionService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"cloudConnection": &graphql.Field{
			Type: Gql__type_CloudConnection(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetCloudConnectionRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for cloudConnection")
				}
				client := NewCloudConnectionServiceClient(conn)
				resp, err := client.GetCloudConnection(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetCloudConnection")
				}
				return resp, nil
			},
		},
		"deleteCloudConnection": &graphql.Field{
			Type: gql_ptypes_empty.Gql__type_Empty(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeleteCloudConnectionRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for deleteCloudConnection")
				}
				client := NewCloudConnectionServiceClient(conn)
				resp, err := client.DeleteCloudConnection(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC DeleteCloudConnection")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_CloudConnectionService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createCloudConnection": &graphql.Field{
			Type: Gql__type_CloudConnection(),
			Args: graphql.FieldConfigArgument{
				"cloud_connection": &graphql.ArgumentConfig{
					Type: Gql__input_CloudConnection(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateCloudConnectionRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createCloudConnection")
				}
				client := NewCloudConnectionServiceClient(conn)
				resp, err := client.CreateCloudConnection(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreateCloudConnection")
				}
				return resp, nil
			},
		},

		"updateCloudConnection": &graphql.Field{
			Type: Gql__type_CloudConnection(),
			Args: graphql.FieldConfigArgument{
				"cloud_connection": &graphql.ArgumentConfig{
					Type: Gql__input_CloudConnection(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req UpdateCloudConnectionRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for updateCloudConnection")
				}
				client := NewCloudConnectionServiceClient(conn)
				resp, err := client.UpdateCloudConnection(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC UpdateCloudConnection")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterCloudConnectionServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterCloudConnectionServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterCloudConnectionServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service CloudConnectionService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterCloudConnectionServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_CloudConnectionService(conn))
}
