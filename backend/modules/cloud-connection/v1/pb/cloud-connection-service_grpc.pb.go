// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudConnectionServiceClient is the client API for CloudConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudConnectionServiceClient interface {
	CreateCloudConnection(ctx context.Context, in *CreateCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error)
	UpdateCloudConnection(ctx context.Context, in *UpdateCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error)
	GetCloudConnection(ctx context.Context, in *GetCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error)
	DeleteCloudConnection(ctx context.Context, in *DeleteCloudConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cloudConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudConnectionServiceClient(cc grpc.ClientConnInterface) CloudConnectionServiceClient {
	return &cloudConnectionServiceClient{cc}
}

func (c *cloudConnectionServiceClient) CreateCloudConnection(ctx context.Context, in *CreateCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error) {
	out := new(CloudConnection)
	err := c.cc.Invoke(ctx, "/pb.CloudConnectionService/CreateCloudConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudConnectionServiceClient) UpdateCloudConnection(ctx context.Context, in *UpdateCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error) {
	out := new(CloudConnection)
	err := c.cc.Invoke(ctx, "/pb.CloudConnectionService/UpdateCloudConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudConnectionServiceClient) GetCloudConnection(ctx context.Context, in *GetCloudConnectionRequest, opts ...grpc.CallOption) (*CloudConnection, error) {
	out := new(CloudConnection)
	err := c.cc.Invoke(ctx, "/pb.CloudConnectionService/GetCloudConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudConnectionServiceClient) DeleteCloudConnection(ctx context.Context, in *DeleteCloudConnectionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.CloudConnectionService/DeleteCloudConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudConnectionServiceServer is the server API for CloudConnectionService service.
// All implementations should embed UnimplementedCloudConnectionServiceServer
// for forward compatibility
type CloudConnectionServiceServer interface {
	CreateCloudConnection(context.Context, *CreateCloudConnectionRequest) (*CloudConnection, error)
	UpdateCloudConnection(context.Context, *UpdateCloudConnectionRequest) (*CloudConnection, error)
	GetCloudConnection(context.Context, *GetCloudConnectionRequest) (*CloudConnection, error)
	DeleteCloudConnection(context.Context, *DeleteCloudConnectionRequest) (*empty.Empty, error)
}

// UnimplementedCloudConnectionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCloudConnectionServiceServer struct {
}

func (UnimplementedCloudConnectionServiceServer) CreateCloudConnection(context.Context, *CreateCloudConnectionRequest) (*CloudConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudConnection not implemented")
}
func (UnimplementedCloudConnectionServiceServer) UpdateCloudConnection(context.Context, *UpdateCloudConnectionRequest) (*CloudConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudConnection not implemented")
}
func (UnimplementedCloudConnectionServiceServer) GetCloudConnection(context.Context, *GetCloudConnectionRequest) (*CloudConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudConnection not implemented")
}
func (UnimplementedCloudConnectionServiceServer) DeleteCloudConnection(context.Context, *DeleteCloudConnectionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudConnection not implemented")
}

// UnsafeCloudConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudConnectionServiceServer will
// result in compilation errors.
type UnsafeCloudConnectionServiceServer interface {
	mustEmbedUnimplementedCloudConnectionServiceServer()
}

func RegisterCloudConnectionServiceServer(s grpc.ServiceRegistrar, srv CloudConnectionServiceServer) {
	s.RegisterService(&CloudConnectionService_ServiceDesc, srv)
}

func _CloudConnectionService_CreateCloudConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudConnectionServiceServer).CreateCloudConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudConnectionService/CreateCloudConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudConnectionServiceServer).CreateCloudConnection(ctx, req.(*CreateCloudConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudConnectionService_UpdateCloudConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudConnectionServiceServer).UpdateCloudConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudConnectionService/UpdateCloudConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudConnectionServiceServer).UpdateCloudConnection(ctx, req.(*UpdateCloudConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudConnectionService_GetCloudConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudConnectionServiceServer).GetCloudConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudConnectionService/GetCloudConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudConnectionServiceServer).GetCloudConnection(ctx, req.(*GetCloudConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudConnectionService_DeleteCloudConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudConnectionServiceServer).DeleteCloudConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudConnectionService/DeleteCloudConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudConnectionServiceServer).DeleteCloudConnection(ctx, req.(*DeleteCloudConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudConnectionService_ServiceDesc is the grpc.ServiceDesc for CloudConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudConnectionService",
	HandlerType: (*CloudConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCloudConnection",
			Handler:    _CloudConnectionService_CreateCloudConnection_Handler,
		},
		{
			MethodName: "UpdateCloudConnection",
			Handler:    _CloudConnectionService_UpdateCloudConnection_Handler,
		},
		{
			MethodName: "GetCloudConnection",
			Handler:    _CloudConnectionService_GetCloudConnection_Handler,
		},
		{
			MethodName: "DeleteCloudConnection",
			Handler:    _CloudConnectionService_DeleteCloudConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/cloud-connection-service.proto",
}
