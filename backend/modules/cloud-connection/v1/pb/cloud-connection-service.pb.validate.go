// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/cloud-connection-service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCloudConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCloudConnectionRequestMultiError, or nil if none found.
func (m *CreateCloudConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCloudConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCloudConnectionRequestValidationError{
					field:  "CloudConnection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCloudConnectionRequestValidationError{
					field:  "CloudConnection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudConnectionRequestValidationError{
				field:  "CloudConnection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCloudConnectionRequestMultiError(errors)
	}
	return nil
}

// CreateCloudConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCloudConnectionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCloudConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCloudConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCloudConnectionRequestMultiError) AllErrors() []error { return m }

// CreateCloudConnectionRequestValidationError is the validation error returned
// by CreateCloudConnectionRequest.Validate if the designated constraints
// aren't met.
type CreateCloudConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudConnectionRequestValidationError) ErrorName() string {
	return "CreateCloudConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudConnectionRequestValidationError{}

// Validate checks the field values on DeleteCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloudConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloudConnectionRequestMultiError, or nil if none found.
func (m *DeleteCloudConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloudConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCloudConnectionRequestMultiError(errors)
	}
	return nil
}

// DeleteCloudConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCloudConnectionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCloudConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloudConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloudConnectionRequestMultiError) AllErrors() []error { return m }

// DeleteCloudConnectionRequestValidationError is the validation error returned
// by DeleteCloudConnectionRequest.Validate if the designated constraints
// aren't met.
type DeleteCloudConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudConnectionRequestValidationError) ErrorName() string {
	return "DeleteCloudConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudConnectionRequestValidationError{}

// Validate checks the field values on UpdateCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCloudConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCloudConnectionRequestMultiError, or nil if none found.
func (m *UpdateCloudConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCloudConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCloudConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCloudConnectionRequestValidationError{
					field:  "CloudConnection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCloudConnectionRequestValidationError{
					field:  "CloudConnection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudConnectionRequestValidationError{
				field:  "CloudConnection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCloudConnectionRequestMultiError(errors)
	}
	return nil
}

// UpdateCloudConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCloudConnectionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCloudConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCloudConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCloudConnectionRequestMultiError) AllErrors() []error { return m }

// UpdateCloudConnectionRequestValidationError is the validation error returned
// by UpdateCloudConnectionRequest.Validate if the designated constraints
// aren't met.
type UpdateCloudConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudConnectionRequestValidationError) ErrorName() string {
	return "UpdateCloudConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudConnectionRequestValidationError{}

// Validate checks the field values on GetCloudConnectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloudConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloudConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloudConnectionRequestMultiError, or nil if none found.
func (m *GetCloudConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloudConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCloudConnectionRequestMultiError(errors)
	}
	return nil
}

// GetCloudConnectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetCloudConnectionRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCloudConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloudConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloudConnectionRequestMultiError) AllErrors() []error { return m }

// GetCloudConnectionRequestValidationError is the validation error returned by
// GetCloudConnectionRequest.Validate if the designated constraints aren't met.
type GetCloudConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudConnectionRequestValidationError) ErrorName() string {
	return "GetCloudConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudConnectionRequestValidationError{}

// Validate checks the field values on CloudConnection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudConnectionMultiError, or nil if none found.
func (m *CloudConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for AccountId

	// no validation rules for Provider

	if len(errors) > 0 {
		return CloudConnectionMultiError(errors)
	}
	return nil
}

// CloudConnectionMultiError is an error wrapping multiple validation errors
// returned by CloudConnection.ValidateAll() if the designated constraints
// aren't met.
type CloudConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudConnectionMultiError) AllErrors() []error { return m }

// CloudConnectionValidationError is the validation error returned by
// CloudConnection.Validate if the designated constraints aren't met.
type CloudConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudConnectionValidationError) ErrorName() string { return "CloudConnectionValidationError" }

// Error satisfies the builtin error interface
func (e CloudConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudConnectionValidationError{}
