// Code generated by MockGen. DO NOT EDIT.
// Source: account_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockAccountsClient is a mock of AccountsClient interface.
type MockAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsClientMockRecorder
}

// MockAccountsClientMockRecorder is the mock recorder for MockAccountsClient.
type MockAccountsClientMockRecorder struct {
	mock *MockAccountsClient
}

// NewMockAccountsClient creates a new mock instance.
func NewMockAccountsClient(ctrl *gomock.Controller) *MockAccountsClient {
	mock := &MockAccountsClient{ctrl: ctrl}
	mock.recorder = &MockAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsClient) EXPECT() *MockAccountsClientMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAccountsClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountsClientMockRecorder) DeleteAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountsClient)(nil).DeleteAccount), varargs...)
}

// GetAccount mocks base method.
func (m *MockAccountsClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountsClient)(nil).GetAccount), varargs...)
}

// GetUserAccounts mocks base method.
func (m *MockAccountsClient) GetUserAccounts(ctx context.Context, in *GetUserAccountsRequest, opts ...grpc.CallOption) (*GetUserAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserAccounts", varargs...)
	ret0, _ := ret[0].(*GetUserAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccounts indicates an expected call of GetUserAccounts.
func (mr *MockAccountsClientMockRecorder) GetUserAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccounts", reflect.TypeOf((*MockAccountsClient)(nil).GetUserAccounts), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockAccountsClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountsClientMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountsClient)(nil).UpdateAccount), varargs...)
}

// MockAccountsServer is a mock of AccountsServer interface.
type MockAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsServerMockRecorder
}

// MockAccountsServerMockRecorder is the mock recorder for MockAccountsServer.
type MockAccountsServerMockRecorder struct {
	mock *MockAccountsServer
}

// NewMockAccountsServer creates a new mock instance.
func NewMockAccountsServer(ctrl *gomock.Controller) *MockAccountsServer {
	mock := &MockAccountsServer{ctrl: ctrl}
	mock.recorder = &MockAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsServer) EXPECT() *MockAccountsServerMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAccountsServer) DeleteAccount(arg0 context.Context, arg1 *DeleteAccountRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAccountsServerMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountsServer)(nil).DeleteAccount), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockAccountsServer) GetAccount(arg0 context.Context, arg1 *GetAccountRequest) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountsServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountsServer)(nil).GetAccount), arg0, arg1)
}

// GetUserAccounts mocks base method.
func (m *MockAccountsServer) GetUserAccounts(arg0 context.Context, arg1 *GetUserAccountsRequest) (*GetUserAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccounts", arg0, arg1)
	ret0, _ := ret[0].(*GetUserAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccounts indicates an expected call of GetUserAccounts.
func (mr *MockAccountsServerMockRecorder) GetUserAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccounts", reflect.TypeOf((*MockAccountsServer)(nil).GetUserAccounts), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockAccountsServer) UpdateAccount(arg0 context.Context, arg1 *UpdateAccountRequest) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAccountsServerMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountsServer)(nil).UpdateAccount), arg0, arg1)
}

// MockUnsafeAccountsServer is a mock of UnsafeAccountsServer interface.
type MockUnsafeAccountsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccountsServerMockRecorder
}

// MockUnsafeAccountsServerMockRecorder is the mock recorder for MockUnsafeAccountsServer.
type MockUnsafeAccountsServerMockRecorder struct {
	mock *MockUnsafeAccountsServer
}

// NewMockUnsafeAccountsServer creates a new mock instance.
func NewMockUnsafeAccountsServer(ctrl *gomock.Controller) *MockUnsafeAccountsServer {
	mock := &MockUnsafeAccountsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccountsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAccountsServer) EXPECT() *MockUnsafeAccountsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccountsServer mocks base method.
func (m *MockUnsafeAccountsServer) mustEmbedUnimplementedAccountsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountsServer")
}

// mustEmbedUnimplementedAccountsServer indicates an expected call of mustEmbedUnimplementedAccountsServer.
func (mr *MockUnsafeAccountsServerMockRecorder) mustEmbedUnimplementedAccountsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountsServer", reflect.TypeOf((*MockUnsafeAccountsServer)(nil).mustEmbedUnimplementedAccountsServer))
}
