syntax = "proto3";
package alfred.vcs_connection.v1.internal;

option go_package = "/pb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "types/enums.proto";

service VCSConnectionInternal {
    // GetVCSConnection returns information of vcs stored in DB
    rpc GetVCSConnection(GetVCSConnectionRequest) returns (VCSConnection);

    //CreateVCSConnection creates vcs entry in DB
    rpc CreateVCSConnection(CreateVCSConnectionRequest) returns (VCSConnection);

    // RevokeVCSToken revoke the provided access token
    rpc RevokeVCSToken(RevokeVCSTokenRequest) returns (google.protobuf.Empty);

    // RenewVCSToken renew the token
    rpc RenewVCSToken(RenewVCSTokenRequest) returns (google.protobuf.Empty);
}

message VCSConnection {
    //id generated by uuid
    string id = 1;
    // label of vcs connection
    string label = 2;
    // Git Providers
    types.GitProviders provider = 3;
    // unique connection_id
    string connection_id = 4;
    // access token
    string access_token = 5;
    // refresh token
    string refresh_token = 6 ;
    google.protobuf.Timestamp access_token_expiry = 7;
    google.protobuf.Timestamp refresh_token_expiry = 8;
    // user can revoke the vcs access
    bool revoked = 9;
    // vcs connection must belong to a account_id
    string account_id = 10;
    //specific user-name required while fetching the repo
    string user_name = 11;
}

message AccountVCSConnection{
    types.GitProviders provider = 1;
    string account_id = 2;
    string label = 3;
}

message RevokeVCSTokenRequest{
    types.GitProviders provider = 2;
    string vcs_id = 1;
}
message RenewVCSTokenRequest{
    types.GitProviders provider = 1;
}

message CreateVCSConnectionRequest{
    VCSConnection vcs_connection = 1;
}

message GetVCSConnectionRequest{
    string account_id = 1;
    types.GitProviders provider = 2;
}
