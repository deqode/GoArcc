syntax = "proto3";
package alfred.vcs_connection.v1;

option go_package = "/pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "types/enums.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

service VCSConnections {
    //ListAllSupportedVCSProviders returns all external providers list supported by alfred
    rpc ListAllSupportedVCSProviders(google.protobuf.Empty) returns (ListAllSupportedVCSProvidersResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/list-all-supported-VCS-providers"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "listAllSupportedVCSProviders"
        };
    }

    //Authorize provide a URL of external OAuth application
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/authorize/{provider}"
        };
    };

    //Callback called by external OAuth application
    rpc Callback(CallbackRequest) returns (AccountVCSConnection){
        option (google.api.http) = {
            get: "/v1/vcs-connection/{provider}/callback"
        };
    };

    //ListVCSConnection list all connected service of user's account
    rpc ListVCSConnection(ListVCSConnectionRequest) returns (ListVCSConnectionResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/list-vcs-connections"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "vcsConnections"
        };
    }

    //GetAccountVCSConnection return a vcs_connection based on id with limited data
    rpc GetAccountVCSConnection(GetVCSConnectionRequest) returns (AccountVCSConnection){
        option (google.api.http) = {
            get: "/v1/vcs-connection/vcs-connection/{id}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "vcsConnection"
        };
    }

    // RevokeVCSToken revoke the provided access token
    rpc RevokeVCSToken(RevokeVCSTokenRequest) returns (google.protobuf.Empty);

    // RenewVCSToken renew the token
    rpc RenewVCSToken(RenewVCSTokenRequest) returns (google.protobuf.Empty);
}

message ListAllSupportedVCSProvidersResponse{
    repeated string providers = 1;
}
message AuthorizeRequest{
    types.VCSProviders provider = 1;
    string label = 2;
}
message AuthorizeResponse{
    string redirect_url = 1;
}

message CallbackRequest{
    types.VCSProviders provider = 1 [(validate.rules).enum = {not_in: [0]}];
    string state = 2;
    string code = 3  [(validate.rules).string.min_len = 3];
    string account_id = 4 [(validate.rules).string.uuid = true];
}

message AccountVCSConnection{
    string id = 1[(validate.rules).string.uuid = true];
    types.VCSProviders provider = 2;
    string account_id = 3 [(validate.rules).string.uuid = true];
    string label = 4;
    string user_name = 5 ;
}

message ListVCSConnectionRequest{
    string account_id = 1 [(validate.rules).string.uuid = true];
    types.VCSProviders provider = 2;
}

message ListVCSConnectionResponse{
    repeated AccountVCSConnection vcs_connection = 1;
}

message GetVCSConnectionRequest{
    string id = 1;
    string account_id = 2 [(validate.rules).string.uuid = true];
    types.VCSProviders provider = 3;
}

message RevokeVCSTokenRequest{
    types.VCSProviders provider = 2;
    string vcs_id = 1 [(validate.rules).string.uuid = true];
}
message RenewVCSTokenRequest{
    types.VCSProviders provider = 1;
}

