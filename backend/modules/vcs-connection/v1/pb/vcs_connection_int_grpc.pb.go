// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VCSConnectionInternalClient is the client API for VCSConnectionInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCSConnectionInternalClient interface {
	// GetVCSConnection returns information of vcs stored in DB (internal)
	GetVCSConnection(ctx context.Context, in *GetVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error)
	//CreateVCSConnection creates vcs entry in DB (internal)
	CreateVCSConnection(ctx context.Context, in *CreateVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error)
}

type vCSConnectionInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewVCSConnectionInternalClient(cc grpc.ClientConnInterface) VCSConnectionInternalClient {
	return &vCSConnectionInternalClient{cc}
}

func (c *vCSConnectionInternalClient) GetVCSConnection(ctx context.Context, in *GetVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error) {
	out := new(VCSConnection)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.internal.v1.VCSConnectionInternal/GetVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionInternalClient) CreateVCSConnection(ctx context.Context, in *CreateVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error) {
	out := new(VCSConnection)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.internal.v1.VCSConnectionInternal/CreateVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCSConnectionInternalServer is the server API for VCSConnectionInternal service.
// All implementations should embed UnimplementedVCSConnectionInternalServer
// for forward compatibility
type VCSConnectionInternalServer interface {
	// GetVCSConnection returns information of vcs stored in DB (internal)
	GetVCSConnection(context.Context, *GetVCSConnectionRequest) (*VCSConnection, error)
	//CreateVCSConnection creates vcs entry in DB (internal)
	CreateVCSConnection(context.Context, *CreateVCSConnectionRequest) (*VCSConnection, error)
}

// UnimplementedVCSConnectionInternalServer should be embedded to have forward compatible implementations.
type UnimplementedVCSConnectionInternalServer struct {
}

func (UnimplementedVCSConnectionInternalServer) GetVCSConnection(context.Context, *GetVCSConnectionRequest) (*VCSConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVCSConnection not implemented")
}
func (UnimplementedVCSConnectionInternalServer) CreateVCSConnection(context.Context, *CreateVCSConnectionRequest) (*VCSConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVCSConnection not implemented")
}

// UnsafeVCSConnectionInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCSConnectionInternalServer will
// result in compilation errors.
type UnsafeVCSConnectionInternalServer interface {
	mustEmbedUnimplementedVCSConnectionInternalServer()
}

func RegisterVCSConnectionInternalServer(s grpc.ServiceRegistrar, srv VCSConnectionInternalServer) {
	s.RegisterService(&VCSConnectionInternal_ServiceDesc, srv)
}

func _VCSConnectionInternal_GetVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVCSConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServer).GetVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.internal.v1.VCSConnectionInternal/GetVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServer).GetVCSConnection(ctx, req.(*GetVCSConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionInternal_CreateVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVCSConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServer).CreateVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.internal.v1.VCSConnectionInternal/CreateVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServer).CreateVCSConnection(ctx, req.(*CreateVCSConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VCSConnectionInternal_ServiceDesc is the grpc.ServiceDesc for VCSConnectionInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VCSConnectionInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alfred.vcs_connection.internal.v1.VCSConnectionInternal",
	HandlerType: (*VCSConnectionInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSConnection",
			Handler:    _VCSConnectionInternal_GetVCSConnection_Handler,
		},
		{
			MethodName: "CreateVCSConnection",
			Handler:    _VCSConnectionInternal_CreateVCSConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/vcs_connection_int.proto",
}
