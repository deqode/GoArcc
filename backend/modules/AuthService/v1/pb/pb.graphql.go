// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"github.com/graphql-go/graphql"
)

var (
	gql__type_ValidateUserLoginResponse  *graphql.Object      // message ValidateUserLoginResponse in auth-service.proto
	gql__type_ValidateUserLoginRequest   *graphql.Object      // message ValidateUserLoginRequest in auth-service.proto
	gql__type_UserLoginResponse          *graphql.Object      // message UserLoginResponse in auth-service.proto
	gql__type_UserLoginCallbackResponse  *graphql.Object      // message UserLoginCallbackResponse in auth-service.proto
	gql__type_UserLoginCallbackRequest   *graphql.Object      // message UserLoginCallbackRequest in auth-service.proto
	gql__input_ValidateUserLoginResponse *graphql.InputObject // message ValidateUserLoginResponse in auth-service.proto
	gql__input_ValidateUserLoginRequest  *graphql.InputObject // message ValidateUserLoginRequest in auth-service.proto
	gql__input_UserLoginResponse         *graphql.InputObject // message UserLoginResponse in auth-service.proto
	gql__input_UserLoginCallbackResponse *graphql.InputObject // message UserLoginCallbackResponse in auth-service.proto
	gql__input_UserLoginCallbackRequest  *graphql.InputObject // message UserLoginCallbackRequest in auth-service.proto
)

func Gql__type_ValidateUserLoginResponse() *graphql.Object {
	if gql__type_ValidateUserLoginResponse == nil {
		gql__type_ValidateUserLoginResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ValidateUserLoginResponse",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the user Unique identifier`,
				},
			},
		})
	}
	return gql__type_ValidateUserLoginResponse
}

func Gql__type_ValidateUserLoginRequest() *graphql.Object {
	if gql__type_ValidateUserLoginRequest == nil {
		gql__type_ValidateUserLoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Pb_Type_ValidateUserLoginRequest",
			Description: `ValidateUserLoginRequest contains user login credential.`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the user Unique identifier`,
				},
				"password": &graphql.Field{
					Type:        graphql.String,
					Description: `Password  is the user password`,
				},
			},
		})
	}
	return gql__type_ValidateUserLoginRequest
}

func Gql__type_UserLoginResponse() *graphql.Object {
	if gql__type_UserLoginResponse == nil {
		gql__type_UserLoginResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLoginResponse",
			Fields: graphql.Fields{
				"url": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UserLoginResponse
}

func Gql__type_UserLoginCallbackResponse() *graphql.Object {
	if gql__type_UserLoginCallbackResponse == nil {
		gql__type_UserLoginCallbackResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLoginCallbackResponse",
			Fields: graphql.Fields{
				"id_token": &graphql.Field{
					Type: graphql.String,
				},
				"access_token": &graphql.Field{
					Type: graphql.String,
				},
				"user_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UserLoginCallbackResponse
}

func Gql__type_UserLoginCallbackRequest() *graphql.Object {
	if gql__type_UserLoginCallbackRequest == nil {
		gql__type_UserLoginCallbackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLoginCallbackRequest",
			Fields: graphql.Fields{
				"state": &graphql.Field{
					Type: graphql.String,
				},
				"code": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UserLoginCallbackRequest
}

func Gql__input_ValidateUserLoginResponse() *graphql.InputObject {
	if gql__input_ValidateUserLoginResponse == nil {
		gql__input_ValidateUserLoginResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ValidateUserLoginResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the user Unique identifier`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_ValidateUserLoginResponse
}

func Gql__input_ValidateUserLoginRequest() *graphql.InputObject {
	if gql__input_ValidateUserLoginRequest == nil {
		gql__input_ValidateUserLoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ValidateUserLoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the user Unique identifier`,
					Type:        graphql.String,
				},
				"password": &graphql.InputObjectFieldConfig{
					Description: `Password  is the user password`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_ValidateUserLoginRequest
}

func Gql__input_UserLoginResponse() *graphql.InputObject {
	if gql__input_UserLoginResponse == nil {
		gql__input_UserLoginResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLoginResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"url": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UserLoginResponse
}

func Gql__input_UserLoginCallbackResponse() *graphql.InputObject {
	if gql__input_UserLoginCallbackResponse == nil {
		gql__input_UserLoginCallbackResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLoginCallbackResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"id_token": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"access_token": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"user_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UserLoginCallbackResponse
}

func Gql__input_UserLoginCallbackRequest() *graphql.InputObject {
	if gql__input_UserLoginCallbackRequest == nil {
		gql__input_UserLoginCallbackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLoginCallbackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"state": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"code": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UserLoginCallbackRequest
}
