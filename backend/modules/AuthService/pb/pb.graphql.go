// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"github.com/graphql-go/graphql"
	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
)

var (
	gql__type_ValidateUserLoginResponse  *graphql.Object      // message ValidateUserLoginResponse in auth-service.proto
	gql__type_ValidateUserLoginRequest   *graphql.Object      // message ValidateUserLoginRequest in auth-service.proto
	gql__type_UserLoginResponse          *graphql.Object      // message UserLoginResponse in auth-service.proto
	gql__type_UserLoginCallbackRequest   *graphql.Object      // message UserLoginCallbackRequest in auth-service.proto
	gql__type_UserLogin                  *graphql.Object      // message UserLogin in auth-service.proto
	gql__type_User                       *graphql.Object      // message User in auth-service.proto
	gql__type_UpdateUserPasswordRequest  *graphql.Object      // message UpdateUserPasswordRequest in auth-service.proto
	gql__type_ResetUserPasswordRequest   *graphql.Object      // message ResetUserPasswordRequest in auth-service.proto
	gql__type_GetUserLoginRequest        *graphql.Object      // message GetUserLoginRequest in auth-service.proto
	gql__type_DeleteUserLoginRequest     *graphql.Object      // message DeleteUserLoginRequest in auth-service.proto
	gql__input_ValidateUserLoginResponse *graphql.InputObject // message ValidateUserLoginResponse in auth-service.proto
	gql__input_ValidateUserLoginRequest  *graphql.InputObject // message ValidateUserLoginRequest in auth-service.proto
	gql__input_UserLoginResponse         *graphql.InputObject // message UserLoginResponse in auth-service.proto
	gql__input_UserLoginCallbackRequest  *graphql.InputObject // message UserLoginCallbackRequest in auth-service.proto
	gql__input_UserLogin                 *graphql.InputObject // message UserLogin in auth-service.proto
	gql__input_User                      *graphql.InputObject // message User in auth-service.proto
	gql__input_UpdateUserPasswordRequest *graphql.InputObject // message UpdateUserPasswordRequest in auth-service.proto
	gql__input_ResetUserPasswordRequest  *graphql.InputObject // message ResetUserPasswordRequest in auth-service.proto
	gql__input_GetUserLoginRequest       *graphql.InputObject // message GetUserLoginRequest in auth-service.proto
	gql__input_DeleteUserLoginRequest    *graphql.InputObject // message DeleteUserLoginRequest in auth-service.proto
)

func Gql__type_ValidateUserLoginResponse() *graphql.Object {
	if gql__type_ValidateUserLoginResponse == nil {
		gql__type_ValidateUserLoginResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ValidateUserLoginResponse",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the user Unique identifier`,
				},
			},
		})
	}
	return gql__type_ValidateUserLoginResponse
}

func Gql__type_ValidateUserLoginRequest() *graphql.Object {
	if gql__type_ValidateUserLoginRequest == nil {
		gql__type_ValidateUserLoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Pb_Type_ValidateUserLoginRequest",
			Description: `ValidateUserLoginRequest contains user login credential.`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the user Unique identifier`,
				},
				"password": &graphql.Field{
					Type:        graphql.String,
					Description: `Password  is the user password`,
				},
			},
		})
	}
	return gql__type_ValidateUserLoginRequest
}

func Gql__type_UserLoginResponse() *graphql.Object {
	if gql__type_UserLoginResponse == nil {
		gql__type_UserLoginResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLoginResponse",
			Fields: graphql.Fields{
				"url": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UserLoginResponse
}

func Gql__type_UserLoginCallbackRequest() *graphql.Object {
	if gql__type_UserLoginCallbackRequest == nil {
		gql__type_UserLoginCallbackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLoginCallbackRequest",
			Fields: graphql.Fields{
				"state": &graphql.Field{
					Type: graphql.String,
				},
				"code": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UserLoginCallbackRequest
}

func Gql__type_UserLogin() *graphql.Object {
	if gql__type_UserLogin == nil {
		gql__type_UserLogin = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UserLogin",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.String,
				},
				"password": &graphql.Field{
					Type: graphql.String,
				},
				"password_changed_on": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
			},
		})
	}
	return gql__type_UserLogin
}

func Gql__type_User() *graphql.Object {
	if gql__type_User == nil {
		gql__type_User = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_User",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the unique identifier of the user`,
				},
			},
		})
	}
	return gql__type_User
}

func Gql__type_UpdateUserPasswordRequest() *graphql.Object {
	if gql__type_UpdateUserPasswordRequest == nil {
		gql__type_UpdateUserPasswordRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_UpdateUserPasswordRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the unique user id`,
				},
				"old_password": &graphql.Field{
					Type:        graphql.String,
					Description: `Password to be added against the given user id.`,
				},
				"new_password": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_UpdateUserPasswordRequest
}

func Gql__type_ResetUserPasswordRequest() *graphql.Object {
	if gql__type_ResetUserPasswordRequest == nil {
		gql__type_ResetUserPasswordRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ResetUserPasswordRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the unique user id`,
				},
				"new_password": &graphql.Field{
					Type:        graphql.String,
					Description: `Password to be added against the given user id.`,
				},
			},
		})
	}
	return gql__type_ResetUserPasswordRequest
}

func Gql__type_GetUserLoginRequest() *graphql.Object {
	if gql__type_GetUserLoginRequest == nil {
		gql__type_GetUserLoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetUserLoginRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the unique user id`,
				},
			},
		})
	}
	return gql__type_GetUserLoginRequest
}

func Gql__type_DeleteUserLoginRequest() *graphql.Object {
	if gql__type_DeleteUserLoginRequest == nil {
		gql__type_DeleteUserLoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_DeleteUserLoginRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `Id is the unique user id`,
				},
			},
		})
	}
	return gql__type_DeleteUserLoginRequest
}

func Gql__input_ValidateUserLoginResponse() *graphql.InputObject {
	if gql__input_ValidateUserLoginResponse == nil {
		gql__input_ValidateUserLoginResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ValidateUserLoginResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the user Unique identifier`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_ValidateUserLoginResponse
}

func Gql__input_ValidateUserLoginRequest() *graphql.InputObject {
	if gql__input_ValidateUserLoginRequest == nil {
		gql__input_ValidateUserLoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ValidateUserLoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the user Unique identifier`,
					Type:        graphql.String,
				},
				"password": &graphql.InputObjectFieldConfig{
					Description: `Password  is the user password`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_ValidateUserLoginRequest
}

func Gql__input_UserLoginResponse() *graphql.InputObject {
	if gql__input_UserLoginResponse == nil {
		gql__input_UserLoginResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLoginResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"url": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UserLoginResponse
}

func Gql__input_UserLoginCallbackRequest() *graphql.InputObject {
	if gql__input_UserLoginCallbackRequest == nil {
		gql__input_UserLoginCallbackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLoginCallbackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"state": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"code": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UserLoginCallbackRequest
}

func Gql__input_UserLogin() *graphql.InputObject {
	if gql__input_UserLogin == nil {
		gql__input_UserLogin = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UserLogin",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"password": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"password_changed_on": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
			},
		})
	}
	return gql__input_UserLogin
}

func Gql__input_User() *graphql.InputObject {
	if gql__input_User == nil {
		gql__input_User = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_User",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the unique identifier of the user`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_User
}

func Gql__input_UpdateUserPasswordRequest() *graphql.InputObject {
	if gql__input_UpdateUserPasswordRequest == nil {
		gql__input_UpdateUserPasswordRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_UpdateUserPasswordRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the unique user id`,
					Type:        graphql.String,
				},
				"old_password": &graphql.InputObjectFieldConfig{
					Description: `Password to be added against the given user id.`,
					Type:        graphql.String,
				},
				"new_password": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_UpdateUserPasswordRequest
}

func Gql__input_ResetUserPasswordRequest() *graphql.InputObject {
	if gql__input_ResetUserPasswordRequest == nil {
		gql__input_ResetUserPasswordRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ResetUserPasswordRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the unique user id`,
					Type:        graphql.String,
				},
				"new_password": &graphql.InputObjectFieldConfig{
					Description: `Password to be added against the given user id.`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_ResetUserPasswordRequest
}

func Gql__input_GetUserLoginRequest() *graphql.InputObject {
	if gql__input_GetUserLoginRequest == nil {
		gql__input_GetUserLoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetUserLoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the unique user id`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_GetUserLoginRequest
}

func Gql__input_DeleteUserLoginRequest() *graphql.InputObject {
	if gql__input_DeleteUserLoginRequest == nil {
		gql__input_DeleteUserLoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_DeleteUserLoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `Id is the unique user id`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_DeleteUserLoginRequest
}
