// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: vcs-connection-service.proto

package pb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/ysugimoto/grpc-graphql-gateway/graphql"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VCSConnectionProvider int32

const (
	VCSConnectionProvider_VCS_UNKNOWN   VCSConnectionProvider = 0
	VCSConnectionProvider_VCS_GITHUB    VCSConnectionProvider = 1
	VCSConnectionProvider_VCS_GITLAB    VCSConnectionProvider = 2
	VCSConnectionProvider_VCS_BITBUCKET VCSConnectionProvider = 3
)

// Enum value maps for VCSConnectionProvider.
var (
	VCSConnectionProvider_name = map[int32]string{
		0: "VCS_UNKNOWN",
		1: "VCS_GITHUB",
		2: "VCS_GITLAB",
		3: "VCS_BITBUCKET",
	}
	VCSConnectionProvider_value = map[string]int32{
		"VCS_UNKNOWN":   0,
		"VCS_GITHUB":    1,
		"VCS_GITLAB":    2,
		"VCS_BITBUCKET": 3,
	}
)

func (x VCSConnectionProvider) Enum() *VCSConnectionProvider {
	p := new(VCSConnectionProvider)
	*p = x
	return p
}

func (x VCSConnectionProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCSConnectionProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_vcs_connection_service_proto_enumTypes[0].Descriptor()
}

func (VCSConnectionProvider) Type() protoreflect.EnumType {
	return &file_vcs_connection_service_proto_enumTypes[0]
}

func (x VCSConnectionProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCSConnectionProvider.Descriptor instead.
func (VCSConnectionProvider) EnumDescriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{0}
}

type ListAlfredVCSConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *ListAlfredVCSConnectionResponse) Reset() {
	*x = ListAlfredVCSConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAlfredVCSConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlfredVCSConnectionResponse) ProtoMessage() {}

func (x *ListAlfredVCSConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlfredVCSConnectionResponse.ProtoReflect.Descriptor instead.
func (*ListAlfredVCSConnectionResponse) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListAlfredVCSConnectionResponse) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider VCSConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri          string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	AccountId    string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TempJwtToken string `protobuf:"bytes,4,opt,name=temp_jwt_token,json=tempJwtToken,proto3" json:"temp_jwt_token,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ConnectResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ConnectResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectResponse) GetTempJwtToken() string {
	if x != nil {
		return x.TempJwtToken
	}
	return ""
}

type ConnectedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider VCSConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
	State    string                `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Code     string                `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ConnectedRequest) Reset() {
	*x = ConnectedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedRequest) ProtoMessage() {}

func (x *ConnectedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedRequest.ProtoReflect.Descriptor instead.
func (*ConnectedRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectedRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

func (x *ConnectedRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ConnectedRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ConnectedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectedResponse) Reset() {
	*x = ConnectedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedResponse) ProtoMessage() {}

func (x *ConnectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedResponse.ProtoReflect.Descriptor instead.
func (*ConnectedResponse) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{4}
}

type VCSConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//id generated by uuid
	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider           VCSConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
	ConnectionId       string                `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	AccessToken        string                `protobuf:"bytes,4,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	RefreshToken       string                `protobuf:"bytes,5,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	AccessTokenExpiry  *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=accessTokenExpiry,proto3" json:"accessTokenExpiry,omitempty"`
	RefreshTokenExpiry *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=refreshTokenExpiry,proto3" json:"refreshTokenExpiry,omitempty"`
	Revoked            bool                  `protobuf:"varint,8,opt,name=revoked,proto3" json:"revoked,omitempty"`
	AccountId          string                `protobuf:"bytes,9,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *VCSConnection) Reset() {
	*x = VCSConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCSConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCSConnection) ProtoMessage() {}

func (x *VCSConnection) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCSConnection.ProtoReflect.Descriptor instead.
func (*VCSConnection) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{5}
}

func (x *VCSConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VCSConnection) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

func (x *VCSConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *VCSConnection) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *VCSConnection) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *VCSConnection) GetAccessTokenExpiry() *timestamp.Timestamp {
	if x != nil {
		return x.AccessTokenExpiry
	}
	return nil
}

func (x *VCSConnection) GetRefreshTokenExpiry() *timestamp.Timestamp {
	if x != nil {
		return x.RefreshTokenExpiry
	}
	return nil
}

func (x *VCSConnection) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *VCSConnection) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AccountVCSConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider  VCSConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
	AccountId string                `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AccountVCSConnection) Reset() {
	*x = AccountVCSConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountVCSConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVCSConnection) ProtoMessage() {}

func (x *AccountVCSConnection) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVCSConnection.ProtoReflect.Descriptor instead.
func (*AccountVCSConnection) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{6}
}

func (x *AccountVCSConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountVCSConnection) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

func (x *AccountVCSConnection) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ListVCSConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Provider  VCSConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
}

func (x *ListVCSConnectionRequest) Reset() {
	*x = ListVCSConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVCSConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSConnectionRequest) ProtoMessage() {}

func (x *ListVCSConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSConnectionRequest.ProtoReflect.Descriptor instead.
func (*ListVCSConnectionRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListVCSConnectionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListVCSConnectionRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

type GetVCSConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Provider  VCSConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
}

func (x *GetVCSConnectionRequest) Reset() {
	*x = GetVCSConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVCSConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVCSConnectionRequest) ProtoMessage() {}

func (x *GetVCSConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVCSConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetVCSConnectionRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetVCSConnectionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetVCSConnectionRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

type ListVCSConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VcsConnection []*AccountVCSConnection `protobuf:"bytes,1,rep,name=vcs_connection,json=vcsConnection,proto3" json:"vcs_connection,omitempty"`
}

func (x *ListVCSConnectionResponse) Reset() {
	*x = ListVCSConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVCSConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSConnectionResponse) ProtoMessage() {}

func (x *ListVCSConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSConnectionResponse.ProtoReflect.Descriptor instead.
func (*ListVCSConnectionResponse) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListVCSConnectionResponse) GetVcsConnection() []*AccountVCSConnection {
	if x != nil {
		return x.VcsConnection
	}
	return nil
}

type RevokeVCSTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider VCSConnectionProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
	VcsId    string                `protobuf:"bytes,1,opt,name=vcs_id,json=vcsId,proto3" json:"vcs_id,omitempty"`
}

func (x *RevokeVCSTokenRequest) Reset() {
	*x = RevokeVCSTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeVCSTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeVCSTokenRequest) ProtoMessage() {}

func (x *RevokeVCSTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeVCSTokenRequest.ProtoReflect.Descriptor instead.
func (*RevokeVCSTokenRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{10}
}

func (x *RevokeVCSTokenRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

func (x *RevokeVCSTokenRequest) GetVcsId() string {
	if x != nil {
		return x.VcsId
	}
	return ""
}

type RenewVCSTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider VCSConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
}

func (x *RenewVCSTokenRequest) Reset() {
	*x = RenewVCSTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewVCSTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewVCSTokenRequest) ProtoMessage() {}

func (x *RenewVCSTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewVCSTokenRequest.ProtoReflect.Descriptor instead.
func (*RenewVCSTokenRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{11}
}

func (x *RenewVCSTokenRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

type CreateVCSConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VcsConnection *VCSConnection `protobuf:"bytes,1,opt,name=vcs_connection,json=vcsConnection,proto3" json:"vcs_connection,omitempty"`
}

func (x *CreateVCSConnectionRequest) Reset() {
	*x = CreateVCSConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVCSConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVCSConnectionRequest) ProtoMessage() {}

func (x *CreateVCSConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVCSConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateVCSConnectionRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateVCSConnectionRequest) GetVcsConnection() *VCSConnection {
	if x != nil {
		return x.VcsConnection
	}
	return nil
}

type Reposistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeID        string               `protobuf:"bytes,2,opt,name=node_iD,json=nodeID,proto3" json:"node_iD,omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FullName      string               `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Description   string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DefaultBranch string               `protobuf:"bytes,6,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	MasterBranch  string               `protobuf:"bytes,7,opt,name=master_branch,json=masterBranch,proto3" json:"master_branch,omitempty"`
	CreatedAt     *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PushedAt      *timestamp.Timestamp `protobuf:"bytes,9,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Clone_URL     string               `protobuf:"bytes,11,opt,name=clone_URL,json=cloneURL,proto3" json:"clone_URL,omitempty"`
	Git_URL       string               `protobuf:"bytes,12,opt,name=git_URL,json=gitURL,proto3" json:"git_URL,omitempty"`
	Size          int32                `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`
	Private       bool                 `protobuf:"varint,14,opt,name=private,proto3" json:"private,omitempty"`
	Branches      []string             `protobuf:"bytes,15,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *Reposistory) Reset() {
	*x = Reposistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reposistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reposistory) ProtoMessage() {}

func (x *Reposistory) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reposistory.ProtoReflect.Descriptor instead.
func (*Reposistory) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{13}
}

func (x *Reposistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reposistory) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Reposistory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reposistory) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Reposistory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Reposistory) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *Reposistory) GetMasterBranch() string {
	if x != nil {
		return x.MasterBranch
	}
	return ""
}

func (x *Reposistory) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Reposistory) GetPushedAt() *timestamp.Timestamp {
	if x != nil {
		return x.PushedAt
	}
	return nil
}

func (x *Reposistory) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Reposistory) GetClone_URL() string {
	if x != nil {
		return x.Clone_URL
	}
	return ""
}

func (x *Reposistory) GetGit_URL() string {
	if x != nil {
		return x.Git_URL
	}
	return ""
}

func (x *Reposistory) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Reposistory) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Reposistory) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

type ListReposistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider VCSConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
}

func (x *ListReposistoryRequest) Reset() {
	*x = ListReposistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReposistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReposistoryRequest) ProtoMessage() {}

func (x *ListReposistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReposistoryRequest.ProtoReflect.Descriptor instead.
func (*ListReposistoryRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListReposistoryRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

type ListReposistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reposistories []*Reposistory `protobuf:"bytes,1,rep,name=reposistories,proto3" json:"reposistories,omitempty"`
}

func (x *ListReposistoryResponse) Reset() {
	*x = ListReposistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReposistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReposistoryResponse) ProtoMessage() {}

func (x *ListReposistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReposistoryResponse.ProtoReflect.Descriptor instead.
func (*ListReposistoryResponse) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListReposistoryResponse) GetReposistories() []*Reposistory {
	if x != nil {
		return x.Reposistories
	}
	return nil
}

type GetReposistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  VCSConnectionProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=pb.VCSConnectionProvider" json:"provider,omitempty"`
	RepoName  string                `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	AccountId string                `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetReposistoryRequest) Reset() {
	*x = GetReposistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcs_connection_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReposistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReposistoryRequest) ProtoMessage() {}

func (x *GetReposistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_connection_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReposistoryRequest.ProtoReflect.Descriptor instead.
func (*GetReposistoryRequest) Descriptor() ([]byte, []int) {
	return file_vcs_connection_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetReposistoryRequest) GetProvider() VCSConnectionProvider {
	if x != nil {
		return x.Provider
	}
	return VCSConnectionProvider_VCS_UNKNOWN
}

func (x *GetReposistoryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GetReposistoryRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

var File_vcs_connection_service_proto protoreflect.FileDescriptor

var file_vcs_connection_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x66, 0x72,
	0x65, 0x64, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x81,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x73, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43,
	0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x03, 0x0a,
	0x0d, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x7c, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x6f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x5c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x76, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65,
	0x0a, 0x15, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x43, 0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x63, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x63, 0x73, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x56, 0x43,
	0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43,
	0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x04, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x55, 0x52, 0x4c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x55, 0x52, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x2a, 0x5b, 0x0a, 0x15, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x43, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x43, 0x53, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x43, 0x53, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x56, 0x43, 0x53, 0x5f, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x03,
	0x32, 0xee, 0x07, 0x0a, 0x14, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x66, 0x72, 0x65, 0x64, 0x56, 0x43, 0x53, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x7d, 0x12, 0x6c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x43, 0x53,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d, 0xba, 0x43, 0x0f, 0x12, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x2d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0xba,
	0x43, 0x0d, 0x12, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x48, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x43, 0x53, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x56, 0x43, 0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x56, 0x43, 0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41,
	0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x56, 0x43, 0x53, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x56, 0x43, 0x53, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_vcs_connection_service_proto_rawDescOnce sync.Once
	file_vcs_connection_service_proto_rawDescData = file_vcs_connection_service_proto_rawDesc
)

func file_vcs_connection_service_proto_rawDescGZIP() []byte {
	file_vcs_connection_service_proto_rawDescOnce.Do(func() {
		file_vcs_connection_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_vcs_connection_service_proto_rawDescData)
	})
	return file_vcs_connection_service_proto_rawDescData
}

var file_vcs_connection_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vcs_connection_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_vcs_connection_service_proto_goTypes = []interface{}{
	(VCSConnectionProvider)(0),              // 0: pb.VCSConnectionProvider
	(*ListAlfredVCSConnectionResponse)(nil), // 1: pb.ListAlfredVCSConnectionResponse
	(*ConnectRequest)(nil),                  // 2: pb.ConnectRequest
	(*ConnectResponse)(nil),                 // 3: pb.ConnectResponse
	(*ConnectedRequest)(nil),                // 4: pb.ConnectedRequest
	(*ConnectedResponse)(nil),               // 5: pb.ConnectedResponse
	(*VCSConnection)(nil),                   // 6: pb.VCSConnection
	(*AccountVCSConnection)(nil),            // 7: pb.AccountVCSConnection
	(*ListVCSConnectionRequest)(nil),        // 8: pb.ListVCSConnectionRequest
	(*GetVCSConnectionRequest)(nil),         // 9: pb.GetVCSConnectionRequest
	(*ListVCSConnectionResponse)(nil),       // 10: pb.ListVCSConnectionResponse
	(*RevokeVCSTokenRequest)(nil),           // 11: pb.RevokeVCSTokenRequest
	(*RenewVCSTokenRequest)(nil),            // 12: pb.RenewVCSTokenRequest
	(*CreateVCSConnectionRequest)(nil),      // 13: pb.CreateVCSConnectionRequest
	(*Reposistory)(nil),                     // 14: pb.Reposistory
	(*ListReposistoryRequest)(nil),          // 15: pb.ListReposistoryRequest
	(*ListReposistoryResponse)(nil),         // 16: pb.ListReposistoryResponse
	(*GetReposistoryRequest)(nil),           // 17: pb.GetReposistoryRequest
	(*timestamp.Timestamp)(nil),             // 18: google.protobuf.Timestamp
	(*empty.Empty)(nil),                     // 19: google.protobuf.Empty
}
var file_vcs_connection_service_proto_depIdxs = []int32{
	0,  // 0: pb.ConnectRequest.provider:type_name -> pb.VCSConnectionProvider
	0,  // 1: pb.ConnectedRequest.provider:type_name -> pb.VCSConnectionProvider
	0,  // 2: pb.VCSConnection.provider:type_name -> pb.VCSConnectionProvider
	18, // 3: pb.VCSConnection.accessTokenExpiry:type_name -> google.protobuf.Timestamp
	18, // 4: pb.VCSConnection.refreshTokenExpiry:type_name -> google.protobuf.Timestamp
	0,  // 5: pb.AccountVCSConnection.provider:type_name -> pb.VCSConnectionProvider
	0,  // 6: pb.ListVCSConnectionRequest.provider:type_name -> pb.VCSConnectionProvider
	0,  // 7: pb.GetVCSConnectionRequest.provider:type_name -> pb.VCSConnectionProvider
	7,  // 8: pb.ListVCSConnectionResponse.vcs_connection:type_name -> pb.AccountVCSConnection
	0,  // 9: pb.RevokeVCSTokenRequest.provider:type_name -> pb.VCSConnectionProvider
	0,  // 10: pb.RenewVCSTokenRequest.provider:type_name -> pb.VCSConnectionProvider
	6,  // 11: pb.CreateVCSConnectionRequest.vcs_connection:type_name -> pb.VCSConnection
	18, // 12: pb.Reposistory.created_at:type_name -> google.protobuf.Timestamp
	18, // 13: pb.Reposistory.pushed_at:type_name -> google.protobuf.Timestamp
	18, // 14: pb.Reposistory.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 15: pb.ListReposistoryRequest.provider:type_name -> pb.VCSConnectionProvider
	14, // 16: pb.ListReposistoryResponse.reposistories:type_name -> pb.Reposistory
	0,  // 17: pb.GetReposistoryRequest.provider:type_name -> pb.VCSConnectionProvider
	19, // 18: pb.VCSConnectionService.ListAlfredVCSConnection:input_type -> google.protobuf.Empty
	2,  // 19: pb.VCSConnectionService.Connect:input_type -> pb.ConnectRequest
	4,  // 20: pb.VCSConnectionService.Connected:input_type -> pb.ConnectedRequest
	8,  // 21: pb.VCSConnectionService.ListVCSConnection:input_type -> pb.ListVCSConnectionRequest
	9,  // 22: pb.VCSConnectionService.GetVCSConnection:input_type -> pb.GetVCSConnectionRequest
	15, // 23: pb.VCSConnectionService.listReposistory:input_type -> pb.ListReposistoryRequest
	17, // 24: pb.VCSConnectionService.GetReposistory:input_type -> pb.GetReposistoryRequest
	13, // 25: pb.VCSConnectionService.CreateVCSConnection:input_type -> pb.CreateVCSConnectionRequest
	11, // 26: pb.VCSConnectionService.RevokeVCSToken:input_type -> pb.RevokeVCSTokenRequest
	12, // 27: pb.VCSConnectionService.RenewVCSToken:input_type -> pb.RenewVCSTokenRequest
	1,  // 28: pb.VCSConnectionService.ListAlfredVCSConnection:output_type -> pb.ListAlfredVCSConnectionResponse
	3,  // 29: pb.VCSConnectionService.Connect:output_type -> pb.ConnectResponse
	7,  // 30: pb.VCSConnectionService.Connected:output_type -> pb.AccountVCSConnection
	10, // 31: pb.VCSConnectionService.ListVCSConnection:output_type -> pb.ListVCSConnectionResponse
	6,  // 32: pb.VCSConnectionService.GetVCSConnection:output_type -> pb.VCSConnection
	16, // 33: pb.VCSConnectionService.listReposistory:output_type -> pb.ListReposistoryResponse
	14, // 34: pb.VCSConnectionService.GetReposistory:output_type -> pb.Reposistory
	6,  // 35: pb.VCSConnectionService.CreateVCSConnection:output_type -> pb.VCSConnection
	19, // 36: pb.VCSConnectionService.RevokeVCSToken:output_type -> google.protobuf.Empty
	19, // 37: pb.VCSConnectionService.RenewVCSToken:output_type -> google.protobuf.Empty
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_vcs_connection_service_proto_init() }
func file_vcs_connection_service_proto_init() {
	if File_vcs_connection_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vcs_connection_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAlfredVCSConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCSConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountVCSConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVCSConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVCSConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVCSConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeVCSTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewVCSTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVCSConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reposistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReposistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReposistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcs_connection_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReposistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vcs_connection_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vcs_connection_service_proto_goTypes,
		DependencyIndexes: file_vcs_connection_service_proto_depIdxs,
		EnumInfos:         file_vcs_connection_service_proto_enumTypes,
		MessageInfos:      file_vcs_connection_service_proto_msgTypes,
	}.Build()
	File_vcs_connection_service_proto = out.File
	file_vcs_connection_service_proto_rawDesc = nil
	file_vcs_connection_service_proto_goTypes = nil
	file_vcs_connection_service_proto_depIdxs = nil
}
