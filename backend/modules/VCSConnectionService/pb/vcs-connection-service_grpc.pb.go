// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VCSConnectionServiceClient is the client API for VCSConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCSConnectionServiceClient interface {
	ListAlfredVCSConnection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAlfredVCSConnectionResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Connected(ctx context.Context, in *ConnectedRequest, opts ...grpc.CallOption) (*AccountVCSConnection, error)
	ListVCSConnection(ctx context.Context, in *ListVCSConnectionRequest, opts ...grpc.CallOption) (*ListVCSConnectionResponse, error)
	RevokeVCSToken(ctx context.Context, in *RevokeVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RenewVCSToken(ctx context.Context, in *RenewVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type vCSConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVCSConnectionServiceClient(cc grpc.ClientConnInterface) VCSConnectionServiceClient {
	return &vCSConnectionServiceClient{cc}
}

func (c *vCSConnectionServiceClient) ListAlfredVCSConnection(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAlfredVCSConnectionResponse, error) {
	out := new(ListAlfredVCSConnectionResponse)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/ListAlfredVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionServiceClient) Connected(ctx context.Context, in *ConnectedRequest, opts ...grpc.CallOption) (*AccountVCSConnection, error) {
	out := new(AccountVCSConnection)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/Connected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionServiceClient) ListVCSConnection(ctx context.Context, in *ListVCSConnectionRequest, opts ...grpc.CallOption) (*ListVCSConnectionResponse, error) {
	out := new(ListVCSConnectionResponse)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/ListVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionServiceClient) RevokeVCSToken(ctx context.Context, in *RevokeVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/RevokeVCSToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionServiceClient) RenewVCSToken(ctx context.Context, in *RenewVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.VCSConnectionService/RenewVCSToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCSConnectionServiceServer is the server API for VCSConnectionService service.
// All implementations must embed UnimplementedVCSConnectionServiceServer
// for forward compatibility
type VCSConnectionServiceServer interface {
	ListAlfredVCSConnection(context.Context, *empty.Empty) (*ListAlfredVCSConnectionResponse, error)
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Connected(context.Context, *ConnectedRequest) (*AccountVCSConnection, error)
	ListVCSConnection(context.Context, *ListVCSConnectionRequest) (*ListVCSConnectionResponse, error)
	RevokeVCSToken(context.Context, *RevokeVCSTokenRequest) (*empty.Empty, error)
	RenewVCSToken(context.Context, *RenewVCSTokenRequest) (*empty.Empty, error)
	//mustEmbedUnimplementedVCSConnectionServiceServer()
}

// UnimplementedVCSConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVCSConnectionServiceServer struct {
}

func (UnimplementedVCSConnectionServiceServer) ListAlfredVCSConnection(context.Context, *empty.Empty) (*ListAlfredVCSConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlfredVCSConnection not implemented")
}
func (UnimplementedVCSConnectionServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedVCSConnectionServiceServer) Connected(context.Context, *ConnectedRequest) (*AccountVCSConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connected not implemented")
}
func (UnimplementedVCSConnectionServiceServer) ListVCSConnection(context.Context, *ListVCSConnectionRequest) (*ListVCSConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVCSConnection not implemented")
}
func (UnimplementedVCSConnectionServiceServer) RevokeVCSToken(context.Context, *RevokeVCSTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeVCSToken not implemented")
}
func (UnimplementedVCSConnectionServiceServer) RenewVCSToken(context.Context, *RenewVCSTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewVCSToken not implemented")
}
func (UnimplementedVCSConnectionServiceServer) mustEmbedUnimplementedVCSConnectionServiceServer() {}

// UnsafeVCSConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCSConnectionServiceServer will
// result in compilation errors.
type UnsafeVCSConnectionServiceServer interface {
	mustEmbedUnimplementedVCSConnectionServiceServer()
}

func RegisterVCSConnectionServiceServer(s *grpc.Server, srv VCSConnectionServiceServer) {
	s.RegisterService(&_VCSConnectionService_serviceDesc, srv)
}

func _VCSConnectionService_ListAlfredVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).ListAlfredVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/ListAlfredVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).ListAlfredVCSConnection(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionService_Connected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).Connected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/Connected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).Connected(ctx, req.(*ConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionService_ListVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVCSConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).ListVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/ListVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).ListVCSConnection(ctx, req.(*ListVCSConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionService_RevokeVCSToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeVCSTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).RevokeVCSToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/RevokeVCSToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).RevokeVCSToken(ctx, req.(*RevokeVCSTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionService_RenewVCSToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewVCSTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionServiceServer).RenewVCSToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VCSConnectionService/RenewVCSToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionServiceServer).RenewVCSToken(ctx, req.(*RenewVCSTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VCSConnectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VCSConnectionService",
	HandlerType: (*VCSConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlfredVCSConnection",
			Handler:    _VCSConnectionService_ListAlfredVCSConnection_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _VCSConnectionService_Connect_Handler,
		},
		{
			MethodName: "Connected",
			Handler:    _VCSConnectionService_Connected_Handler,
		},
		{
			MethodName: "ListVCSConnection",
			Handler:    _VCSConnectionService_ListVCSConnection_Handler,
		},
		{
			MethodName: "RevokeVCSToken",
			Handler:    _VCSConnectionService_RevokeVCSToken_Handler,
		},
		{
			MethodName: "RenewVCSToken",
			Handler:    _VCSConnectionService_RenewVCSToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vcs-connection-service.proto",
}
