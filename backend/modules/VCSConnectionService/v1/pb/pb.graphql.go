// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"github.com/graphql-go/graphql"
	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
)

var (
	gql__enum_VCSConnectionProvider                 *graphql.Enum        // enum VCSConnectionProvider in vcs-connection-service.proto
	gql__type_VCSConnection                         *graphql.Object      // message VCSConnection in vcs-connection-service.proto
	gql__type_ListVCSConnectionResponse             *graphql.Object      // message ListVCSConnectionResponse in vcs-connection-service.proto
	gql__type_ListVCSConnectionRequest              *graphql.Object      // message ListVCSConnectionRequest in vcs-connection-service.proto
	gql__type_ListAllSupportedVCSProvidersResponse  *graphql.Object      // message ListAllSupportedVCSProvidersResponse in vcs-connection-service.proto
	gql__type_CallbackRequest                       *graphql.Object      // message CallbackRequest in vcs-connection-service.proto
	gql__type_AuthorizeResponse                     *graphql.Object      // message AuthorizeResponse in vcs-connection-service.proto
	gql__type_AuthorizeRequest                      *graphql.Object      // message AuthorizeRequest in vcs-connection-service.proto
	gql__type_AccountVCSConnection                  *graphql.Object      // message AccountVCSConnection in vcs-connection-service.proto
	gql__input_VCSConnection                        *graphql.InputObject // message VCSConnection in vcs-connection-service.proto
	gql__input_ListVCSConnectionResponse            *graphql.InputObject // message ListVCSConnectionResponse in vcs-connection-service.proto
	gql__input_ListVCSConnectionRequest             *graphql.InputObject // message ListVCSConnectionRequest in vcs-connection-service.proto
	gql__input_ListAllSupportedVCSProvidersResponse *graphql.InputObject // message ListAllSupportedVCSProvidersResponse in vcs-connection-service.proto
	gql__input_CallbackRequest                      *graphql.InputObject // message CallbackRequest in vcs-connection-service.proto
	gql__input_AuthorizeResponse                    *graphql.InputObject // message AuthorizeResponse in vcs-connection-service.proto
	gql__input_AuthorizeRequest                     *graphql.InputObject // message AuthorizeRequest in vcs-connection-service.proto
	gql__input_AccountVCSConnection                 *graphql.InputObject // message AccountVCSConnection in vcs-connection-service.proto
)

func Gql__enum_VCSConnectionProvider() *graphql.Enum {
	if gql__enum_VCSConnectionProvider == nil {
		gql__enum_VCSConnectionProvider = graphql.NewEnum(graphql.EnumConfig{
			Name: "Pb_Enum_VCSConnectionProvider",
			Values: graphql.EnumValueConfigMap{
				"VCS_UNKNOWN": &graphql.EnumValueConfig{
					Value: VCSConnectionProvider(0),
				},
				"VCS_GITHUB": &graphql.EnumValueConfig{
					Value: VCSConnectionProvider(1),
				},
				"VCS_GITLAB": &graphql.EnumValueConfig{
					Value: VCSConnectionProvider(2),
				},
				"VCS_BITBUCKET": &graphql.EnumValueConfig{
					Value: VCSConnectionProvider(3),
				},
			},
		})
	}
	return gql__enum_VCSConnectionProvider
}

func Gql__type_VCSConnection() *graphql.Object {
	if gql__type_VCSConnection == nil {
		gql__type_VCSConnection = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_VCSConnection",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `id generated by uuid`,
				},
				"label": &graphql.Field{
					Type: graphql.String,
				},
				"provider": &graphql.Field{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"connection_id": &graphql.Field{
					Type: graphql.String,
				},
				"accessToken": &graphql.Field{
					Type: graphql.String,
				},
				"refreshToken": &graphql.Field{
					Type: graphql.String,
				},
				"accessTokenExpiry": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"refreshTokenExpiry": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"revoked": &graphql.Field{
					Type: graphql.Boolean,
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_VCSConnection
}

func Gql__type_ListVCSConnectionResponse() *graphql.Object {
	if gql__type_ListVCSConnectionResponse == nil {
		gql__type_ListVCSConnectionResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListVCSConnectionResponse",
			Fields: graphql.Fields{
				"vcs_connection": &graphql.Field{
					Type: graphql.NewList(Gql__type_AccountVCSConnection()),
				},
			},
		})
	}
	return gql__type_ListVCSConnectionResponse
}

func Gql__type_ListVCSConnectionRequest() *graphql.Object {
	if gql__type_ListVCSConnectionRequest == nil {
		gql__type_ListVCSConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListVCSConnectionRequest",
			Fields: graphql.Fields{
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
				"provider": &graphql.Field{
					Type: Gql__enum_VCSConnectionProvider(),
				},
			},
		})
	}
	return gql__type_ListVCSConnectionRequest
}

func Gql__type_ListAllSupportedVCSProvidersResponse() *graphql.Object {
	if gql__type_ListAllSupportedVCSProvidersResponse == nil {
		gql__type_ListAllSupportedVCSProvidersResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_ListAllSupportedVCSProvidersResponse",
			Fields: graphql.Fields{
				"providers": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_ListAllSupportedVCSProvidersResponse
}

func Gql__type_CallbackRequest() *graphql.Object {
	if gql__type_CallbackRequest == nil {
		gql__type_CallbackRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CallbackRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"state": &graphql.Field{
					Type: graphql.String,
				},
				"code": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_CallbackRequest
}

func Gql__type_AuthorizeResponse() *graphql.Object {
	if gql__type_AuthorizeResponse == nil {
		gql__type_AuthorizeResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_AuthorizeResponse",
			Fields: graphql.Fields{
				"redirect_url": &graphql.Field{
					Type: graphql.String,
				},
				"temp_jwt_token": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_AuthorizeResponse
}

func Gql__type_AuthorizeRequest() *graphql.Object {
	if gql__type_AuthorizeRequest == nil {
		gql__type_AuthorizeRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_AuthorizeRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"label": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_AuthorizeRequest
}

func Gql__type_AccountVCSConnection() *graphql.Object {
	if gql__type_AccountVCSConnection == nil {
		gql__type_AccountVCSConnection = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_AccountVCSConnection",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
				"label": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_AccountVCSConnection
}

func Gql__input_VCSConnection() *graphql.InputObject {
	if gql__input_VCSConnection == nil {
		gql__input_VCSConnection = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_VCSConnection",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `id generated by uuid`,
					Type:        graphql.String,
				},
				"label": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"provider": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"connection_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"accessToken": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"refreshToken": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"accessTokenExpiry": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"refreshTokenExpiry": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"revoked": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_VCSConnection
}

func Gql__input_ListVCSConnectionResponse() *graphql.InputObject {
	if gql__input_ListVCSConnectionResponse == nil {
		gql__input_ListVCSConnectionResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListVCSConnectionResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"vcs_connection": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_AccountVCSConnection()),
				},
			},
		})
	}
	return gql__input_ListVCSConnectionResponse
}

func Gql__input_ListVCSConnectionRequest() *graphql.InputObject {
	if gql__input_ListVCSConnectionRequest == nil {
		gql__input_ListVCSConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListVCSConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"provider": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_VCSConnectionProvider(),
				},
			},
		})
	}
	return gql__input_ListVCSConnectionRequest
}

func Gql__input_ListAllSupportedVCSProvidersResponse() *graphql.InputObject {
	if gql__input_ListAllSupportedVCSProvidersResponse == nil {
		gql__input_ListAllSupportedVCSProvidersResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_ListAllSupportedVCSProvidersResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"providers": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__input_ListAllSupportedVCSProvidersResponse
}

func Gql__input_CallbackRequest() *graphql.InputObject {
	if gql__input_CallbackRequest == nil {
		gql__input_CallbackRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CallbackRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"state": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"code": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_CallbackRequest
}

func Gql__input_AuthorizeResponse() *graphql.InputObject {
	if gql__input_AuthorizeResponse == nil {
		gql__input_AuthorizeResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_AuthorizeResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"redirect_url": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"temp_jwt_token": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_AuthorizeResponse
}

func Gql__input_AuthorizeRequest() *graphql.InputObject {
	if gql__input_AuthorizeRequest == nil {
		gql__input_AuthorizeRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_AuthorizeRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"label": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_AuthorizeRequest
}

func Gql__input_AccountVCSConnection() *graphql.InputObject {
	if gql__input_AccountVCSConnection == nil {
		gql__input_AccountVCSConnection = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_AccountVCSConnection",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_VCSConnectionProvider(),
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"label": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_AccountVCSConnection
}
