syntax = "proto3";
package alfred.vcs_connection.v1;

option go_package = "/pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "google/protobuf/timestamp.proto";
import "types/enums.proto";

service VCSConnectionService {
    //ListAllSupportedVCSProviders returns all external providers list supported by alfred
    rpc ListAllSupportedVCSProviders(google.protobuf.Empty) returns (ListAllSupportedVCSProvidersResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/list-all-supported-VCS-providers"
        };
    }

    //Authorize provide a URL of external OAuth application
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/authorize/{provider}"
        };
    };

    //Callback called by external OAuth application
    rpc Callback(CallbackRequest) returns (AccountVCSConnection){
        option (google.api.http) = {
            get: "/v1/vcs-connection/{provider}/callback"
        };
    };

    //ListVCSConnection list all connected service of user's account
    rpc ListVCSConnection(ListVCSConnectionRequest) returns (ListVCSConnectionResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/list-vcs-connections"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "VCSConnections"
        };
    }
}

message ListAllSupportedVCSProvidersResponse{
    repeated string providers = 1;
}
message AuthorizeRequest{
    types.GitProviders provider = 1;
    string label = 2;
}
message AuthorizeResponse{
    string redirect_url = 1;
    string temp_jwt_token = 4; // TODO: Add label,AccountId in this
}

message CallbackRequest{
    types.GitProviders provider = 1;
    string state = 2;
    string code = 3;
    string account_id = 4;
}

message VCSConnection {
    //id generated by uuid
    string id = 1;
    // label of VCS Connection
    string label = 2;
    // Connection providers
    types.GitProviders provider = 3;
    // unique connection_id provided by external OAuth
    string connection_id = 4;
    // access token for external authorization
    string accessToken = 5;
    // for re-fetching access token
    string refreshToken = 6 ;
    google.protobuf.Timestamp accessTokenExpiry = 7;
    google.protobuf.Timestamp refreshTokenExpiry = 8;
    bool revoked = 9;
    // every connection must be associated with account_id
    string account_id = 10;
    //specific user-name required while fetching the repo
    string user_name = 11;
}

message AccountVCSConnection{
    types.GitProviders provider = 1;
    string account_id = 2;
    string label = 3;
    string user_name = 4;
}

message ListVCSConnectionRequest{
    string account_id = 1;
    types.GitProviders provider = 2;
}

message ListVCSConnectionResponse{
    repeated AccountVCSConnection vcs_connection = 1;
}
