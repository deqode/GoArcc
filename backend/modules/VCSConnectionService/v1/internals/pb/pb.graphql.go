// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	types "alfred/protos/types"
	"github.com/graphql-go/graphql"

	gql_ptypes_timestamp "github.com/ysugimoto/grpc-graphql-gateway/ptypes/timestamp"
)

var (
	gql__type_VCSConnection               *graphql.Object      // message VCSConnection in vcs-connection-internal-service.proto
	gql__type_RevokeVCSTokenRequest       *graphql.Object      // message RevokeVCSTokenRequest in vcs-connection-internal-service.proto
	gql__type_RenewVCSTokenRequest        *graphql.Object      // message RenewVCSTokenRequest in vcs-connection-internal-service.proto
	gql__type_GetVCSConnectionRequest     *graphql.Object      // message GetVCSConnectionRequest in vcs-connection-internal-service.proto
	gql__type_CreateVCSConnectionRequest  *graphql.Object      // message CreateVCSConnectionRequest in vcs-connection-internal-service.proto
	gql__type_AccountVCSConnection        *graphql.Object      // message AccountVCSConnection in vcs-connection-internal-service.proto
	gql__input_VCSConnection              *graphql.InputObject // message VCSConnection in vcs-connection-internal-service.proto
	gql__input_RevokeVCSTokenRequest      *graphql.InputObject // message RevokeVCSTokenRequest in vcs-connection-internal-service.proto
	gql__input_RenewVCSTokenRequest       *graphql.InputObject // message RenewVCSTokenRequest in vcs-connection-internal-service.proto
	gql__input_GetVCSConnectionRequest    *graphql.InputObject // message GetVCSConnectionRequest in vcs-connection-internal-service.proto
	gql__input_CreateVCSConnectionRequest *graphql.InputObject // message CreateVCSConnectionRequest in vcs-connection-internal-service.proto
	gql__input_AccountVCSConnection       *graphql.InputObject // message AccountVCSConnection in vcs-connection-internal-service.proto
)

func Gql__type_VCSConnection() *graphql.Object {
	if gql__type_VCSConnection == nil {
		gql__type_VCSConnection = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_VCSConnection",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type:        graphql.String,
					Description: `id generated by uuid`,
				},
				"label": &graphql.Field{
					Type:        graphql.String,
					Description: `label of vcs connection`,
				},
				"provider": &graphql.Field{
					Type:        types.Gql__enum_GitProviders(),
					Description: `Git Providers`,
				},
				"connection_id": &graphql.Field{
					Type:        graphql.String,
					Description: `unique connection_id`,
				},
				"accessToken": &graphql.Field{
					Type:        graphql.String,
					Description: `access token`,
				},
				"refreshToken": &graphql.Field{
					Type:        graphql.String,
					Description: `refresh token`,
				},
				"accessTokenExpiry": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"refreshTokenExpiry": &graphql.Field{
					Type: gql_ptypes_timestamp.Gql__type_Timestamp(),
				},
				"revoked": &graphql.Field{
					Type: graphql.Boolean,
				},
				"account_id": &graphql.Field{
					Type:        graphql.String,
					Description: `vcs connection must belong to a account_id`,
				},
				"user_name": &graphql.Field{
					Type:        graphql.String,
					Description: `specific user-name required while fetching the repo`,
				},
			},
		})
	}
	return gql__type_VCSConnection
}

func Gql__type_RevokeVCSTokenRequest() *graphql.Object {
	if gql__type_RevokeVCSTokenRequest == nil {
		gql__type_RevokeVCSTokenRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_RevokeVCSTokenRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
				"vcs_id": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_RevokeVCSTokenRequest
}

func Gql__type_RenewVCSTokenRequest() *graphql.Object {
	if gql__type_RenewVCSTokenRequest == nil {
		gql__type_RenewVCSTokenRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_RenewVCSTokenRequest",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
			},
		})
	}
	return gql__type_RenewVCSTokenRequest
}

func Gql__type_GetVCSConnectionRequest() *graphql.Object {
	if gql__type_GetVCSConnectionRequest == nil {
		gql__type_GetVCSConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_GetVCSConnectionRequest",
			Fields: graphql.Fields{
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
			},
		})
	}
	return gql__type_GetVCSConnectionRequest
}

func Gql__type_CreateVCSConnectionRequest() *graphql.Object {
	if gql__type_CreateVCSConnectionRequest == nil {
		gql__type_CreateVCSConnectionRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_CreateVCSConnectionRequest",
			Fields: graphql.Fields{
				"vcs_connection": &graphql.Field{
					Type: Gql__type_VCSConnection(),
				},
			},
		})
	}
	return gql__type_CreateVCSConnectionRequest
}

func Gql__type_AccountVCSConnection() *graphql.Object {
	if gql__type_AccountVCSConnection == nil {
		gql__type_AccountVCSConnection = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_AccountVCSConnection",
			Fields: graphql.Fields{
				"provider": &graphql.Field{
					Type: types.Gql__enum_GitProviders(),
				},
				"account_id": &graphql.Field{
					Type: graphql.String,
				},
				"label": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_AccountVCSConnection
}

func Gql__input_VCSConnection() *graphql.InputObject {
	if gql__input_VCSConnection == nil {
		gql__input_VCSConnection = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_VCSConnection",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Description: `id generated by uuid`,
					Type:        graphql.String,
				},
				"label": &graphql.InputObjectFieldConfig{
					Description: `label of vcs connection`,
					Type:        graphql.String,
				},
				"provider": &graphql.InputObjectFieldConfig{
					Description: `Git Providers`,
					Type:        types.Gql__enum_GitProviders(),
				},
				"connection_id": &graphql.InputObjectFieldConfig{
					Description: `unique connection_id`,
					Type:        graphql.String,
				},
				"accessToken": &graphql.InputObjectFieldConfig{
					Description: `access token`,
					Type:        graphql.String,
				},
				"refreshToken": &graphql.InputObjectFieldConfig{
					Description: `refresh token`,
					Type:        graphql.String,
				},
				"accessTokenExpiry": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"refreshTokenExpiry": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_timestamp.Gql__input_Timestamp(),
				},
				"revoked": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Description: `vcs connection must belong to a account_id`,
					Type:        graphql.String,
				},
				"user_name": &graphql.InputObjectFieldConfig{
					Description: `specific user-name required while fetching the repo`,
					Type:        graphql.String,
				},
			},
		})
	}
	return gql__input_VCSConnection
}

func Gql__input_RevokeVCSTokenRequest() *graphql.InputObject {
	if gql__input_RevokeVCSTokenRequest == nil {
		gql__input_RevokeVCSTokenRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_RevokeVCSTokenRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"vcs_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_RevokeVCSTokenRequest
}

func Gql__input_RenewVCSTokenRequest() *graphql.InputObject {
	if gql__input_RenewVCSTokenRequest == nil {
		gql__input_RenewVCSTokenRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_RenewVCSTokenRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
			},
		})
	}
	return gql__input_RenewVCSTokenRequest
}

func Gql__input_GetVCSConnectionRequest() *graphql.InputObject {
	if gql__input_GetVCSConnectionRequest == nil {
		gql__input_GetVCSConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_GetVCSConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
			},
		})
	}
	return gql__input_GetVCSConnectionRequest
}

func Gql__input_CreateVCSConnectionRequest() *graphql.InputObject {
	if gql__input_CreateVCSConnectionRequest == nil {
		gql__input_CreateVCSConnectionRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_CreateVCSConnectionRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"vcs_connection": &graphql.InputObjectFieldConfig{
					Type: Gql__input_VCSConnection(),
				},
			},
		})
	}
	return gql__input_CreateVCSConnectionRequest
}

func Gql__input_AccountVCSConnection() *graphql.InputObject {
	if gql__input_AccountVCSConnection == nil {
		gql__input_AccountVCSConnection = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_AccountVCSConnection",
			Fields: graphql.InputObjectConfigFieldMap{
				"provider": &graphql.InputObjectFieldConfig{
					Type: types.Gql__enum_GitProviders(),
				},
				"account_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"label": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_AccountVCSConnection
}
