// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VCSConnectionInternalServiceClient is the client API for VCSConnectionInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCSConnectionInternalServiceClient interface {
	//internals
	GetVCSConnection(ctx context.Context, in *GetVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error)
	CreateVCSConnection(ctx context.Context, in *CreateVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error)
	RevokeVCSToken(ctx context.Context, in *RevokeVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RenewVCSToken(ctx context.Context, in *RenewVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type vCSConnectionInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVCSConnectionInternalServiceClient(cc grpc.ClientConnInterface) VCSConnectionInternalServiceClient {
	return &vCSConnectionInternalServiceClient{cc}
}

func (c *vCSConnectionInternalServiceClient) GetVCSConnection(ctx context.Context, in *GetVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error) {
	out := new(VCSConnection)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/GetVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionInternalServiceClient) CreateVCSConnection(ctx context.Context, in *CreateVCSConnectionRequest, opts ...grpc.CallOption) (*VCSConnection, error) {
	out := new(VCSConnection)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/CreateVCSConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionInternalServiceClient) RevokeVCSToken(ctx context.Context, in *RevokeVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/RevokeVCSToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSConnectionInternalServiceClient) RenewVCSToken(ctx context.Context, in *RenewVCSTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/RenewVCSToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCSConnectionInternalServiceServer is the server API for VCSConnectionInternalService service.
// All implementations must embed UnimplementedVCSConnectionInternalServiceServer
// for forward compatibility
type VCSConnectionInternalServiceServer interface {
	//internals
	GetVCSConnection(context.Context, *GetVCSConnectionRequest) (*VCSConnection, error)
	CreateVCSConnection(context.Context, *CreateVCSConnectionRequest) (*VCSConnection, error)
	RevokeVCSToken(context.Context, *RevokeVCSTokenRequest) (*empty.Empty, error)
	RenewVCSToken(context.Context, *RenewVCSTokenRequest) (*empty.Empty, error)
	//mustEmbedUnimplementedVCSConnectionInternalServiceServer()
}

// UnimplementedVCSConnectionInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVCSConnectionInternalServiceServer struct {
}

func (UnimplementedVCSConnectionInternalServiceServer) GetVCSConnection(context.Context, *GetVCSConnectionRequest) (*VCSConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVCSConnection not implemented")
}
func (UnimplementedVCSConnectionInternalServiceServer) CreateVCSConnection(context.Context, *CreateVCSConnectionRequest) (*VCSConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVCSConnection not implemented")
}
func (UnimplementedVCSConnectionInternalServiceServer) RevokeVCSToken(context.Context, *RevokeVCSTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeVCSToken not implemented")
}
func (UnimplementedVCSConnectionInternalServiceServer) RenewVCSToken(context.Context, *RenewVCSTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewVCSToken not implemented")
}
func (UnimplementedVCSConnectionInternalServiceServer) mustEmbedUnimplementedVCSConnectionInternalServiceServer() {
}

// UnsafeVCSConnectionInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCSConnectionInternalServiceServer will
// result in compilation errors.
type UnsafeVCSConnectionInternalServiceServer interface {
	mustEmbedUnimplementedVCSConnectionInternalServiceServer()
}

func RegisterVCSConnectionInternalServiceServer(s *grpc.Server, srv VCSConnectionInternalServiceServer) {
	s.RegisterService(&_VCSConnectionInternalService_serviceDesc, srv)
}

func _VCSConnectionInternalService_GetVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVCSConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServiceServer).GetVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/GetVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServiceServer).GetVCSConnection(ctx, req.(*GetVCSConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionInternalService_CreateVCSConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVCSConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServiceServer).CreateVCSConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/CreateVCSConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServiceServer).CreateVCSConnection(ctx, req.(*CreateVCSConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionInternalService_RevokeVCSToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeVCSTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServiceServer).RevokeVCSToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/RevokeVCSToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServiceServer).RevokeVCSToken(ctx, req.(*RevokeVCSTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSConnectionInternalService_RenewVCSToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewVCSTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSConnectionInternalServiceServer).RenewVCSToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alfred.vcs_connection.v1.internals.VCSConnectionInternalService/RenewVCSToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSConnectionInternalServiceServer).RenewVCSToken(ctx, req.(*RenewVCSTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VCSConnectionInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alfred.vcs_connection.v1.internals.VCSConnectionInternalService",
	HandlerType: (*VCSConnectionInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSConnection",
			Handler:    _VCSConnectionInternalService_GetVCSConnection_Handler,
		},
		{
			MethodName: "CreateVCSConnection",
			Handler:    _VCSConnectionInternalService_CreateVCSConnection_Handler,
		},
		{
			MethodName: "RevokeVCSToken",
			Handler:    _VCSConnectionInternalService_RevokeVCSToken_Handler,
		},
		{
			MethodName: "RenewVCSToken",
			Handler:    _VCSConnectionInternalService_RenewVCSToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vcs-connection-internals-service.proto",
}
