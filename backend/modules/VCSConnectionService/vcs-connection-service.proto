syntax = "proto3";
package pb;

option go_package = "./pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "google/protobuf/timestamp.proto";

service VCSConnectionService {
    rpc CreateVCSConnection(CreateVCSConnectionRequest) returns (VCSConnection){
        option (google.api.http) = {
            post: "/v1/vcs-connection/create-vcs-connection"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION   // decleare as Mutation
            name: "createVCSConnection" // query name
        };
    };
    rpc UpdateVCSConnection(UpdateVCSConnectionRequest) returns (VCSConnection){
        option (google.api.http) = {
            put: "/v1/vcs-connection/update-vcs-connection"
            body: "*"
        };
        option (graphql.schema) = {
            type: MUTATION   // decleare as Mutation
            name: "updateVCSConnection" // query name
        };
    }
    rpc GetVCSConnection(GetVCSConnectionRequest) returns (VCSConnection){
        option (google.api.http) = {
            get: "/v1/vcs-connection/get-vcs-connection/{id}"
        };
        option (graphql.schema) = {
            type: QUERY   // decleare as Mutation
            name: "vcsConnection" // query name
        };
    }
    rpc DeleteVCSConnection(DeleteVCSConnectionRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/vcs-connection/delete-vcs-connection/{id}"
        };
        option (graphql.schema) = {
            type: QUERY   // decleare as query
            name: "deleteVCSConnection" // query name
        };
    }
}

message CreateVCSConnectionRequest {
    VCSConnection cloud_connection = 1;
}

message DeleteVCSConnectionRequest {
    string id = 1;
}

message UpdateVCSConnectionRequest {
    VCSConnection cloud_connection = 1;
}

message GetVCSConnectionRequest {
    string id = 1;
}

message VCSConnection {
    //id generated by uuid
    string id = 1;
    // stored in encrypted form
    string client_id =2;
    // stored in encrypted form
    string client_secret =3;
    string account_id = 4;
    repeated string scope = 5;
    string provider = 6;
}
