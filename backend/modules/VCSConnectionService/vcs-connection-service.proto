syntax = "proto3";
package pb;

option go_package = "./pb";

import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
import "include/graphql.proto";
import "google/protobuf/timestamp.proto";

service VCSConnectionService {
    rpc ListAlfredVCSConnection(google.protobuf.Empty) returns (ListAlfredVCSConnectionResponse);
    rpc Connect(ConnectRequest) returns (ConnectResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/connect/{provider}"
        };
    };
    rpc Connected(ConnectedRequest) returns (AccountVCSConnection){
        option (google.api.http) = {
            get: "/v1/vcs-connection/connected/{provider}"
        };
    };
    rpc ListVCSConnection(ListVCSConnectionRequest) returns (ListVCSConnectionResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/list-vcs-connections"
        };
    }
    rpc GetVCSConnection(GetVCSConnectionRequest) returns (VCSConnection);
    rpc listReposistory(ListReposistoryRequest) returns (ListReposistoryResponse){
        option (google.api.http) = {
            get: "/v1/vcs-connection/reposistories/{provider}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "reposistories"
        };
    }

    rpc GetReposistory(GetReposistoryRequest) returns (Reposistory){
        option (google.api.http) = {
            get: "/v1/vcs-connection/reposistory/{repo_name}"
        };
        option (graphql.schema) = {
            type: QUERY
            name: "reposistory"
        };
    }
    rpc CreateVCSConnection(CreateVCSConnectionRequest) returns (VCSConnection);
    rpc RevokeVCSToken(RevokeVCSTokenRequest) returns (google.protobuf.Empty);
    rpc RenewVCSToken(RenewVCSTokenRequest) returns (google.protobuf.Empty);
}

message ListAlfredVCSConnectionResponse{
    repeated string providers = 1;
}
message ConnectRequest{
    VCSConnectionProvider provider = 1;
}
message ConnectResponse{
    string uri = 1;
    string account_id = 2;
    string user_id = 3;
    string temp_jwt_token = 4;
}

message ConnectedRequest{
    VCSConnectionProvider provider = 1;
    string state = 2;
    string code = 3;
}
message ConnectedResponse{

}

message VCSConnection {
    //id generated by uuid
    string id = 1;
    VCSConnectionProvider provider = 2;
    string connection_id = 3;
    string accessToken = 4 ;
    string refreshToken = 5 ;
    google.protobuf.Timestamp accessTokenExpiry = 6;
    google.protobuf.Timestamp refreshTokenExpiry = 7;
    bool revoked = 8 ;
    string account_id = 9;
}

message AccountVCSConnection{
    string id = 1;
    VCSConnectionProvider provider = 2;
    string account_id = 3;
}

enum VCSConnectionProvider{
    VCS_UNKNOWN = 0;
    VCS_GITHUB = 1;
    VCS_GITLAB = 2;
    VCS_BITBUCKET = 3;
}

message ListVCSConnectionRequest{
    string account_id = 1;
    VCSConnectionProvider provider = 2;
}
message GetVCSConnectionRequest{
    string account_id = 1;
    VCSConnectionProvider provider = 2;
}
message ListVCSConnectionResponse{
    repeated AccountVCSConnection vcs_connection = 1;
}

message RevokeVCSTokenRequest{
    VCSConnectionProvider provider = 2;
    string vcs_id = 1;
}
message RenewVCSTokenRequest{
    VCSConnectionProvider provider = 1;
}

message CreateVCSConnectionRequest{
    VCSConnection vcs_connection = 1;
}

message Reposistory{
    int64 id = 1;
    string node_iD = 2;
    string name = 3;
    string full_name = 4;
    string description = 5;
    string default_branch = 6;
    string master_branch = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp pushed_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    string clone_URL = 11;
    string git_URL = 12;
    int32 size = 13;
    bool private = 14;
    repeated string branches = 15;
}

message ListReposistoryRequest{
    VCSConnectionProvider provider = 1;
}
message ListReposistoryResponse{
    repeated Reposistory reposistories = 1;
}

message GetReposistoryRequest{
    VCSConnectionProvider provider = 1;
    string repo_name = 2;
    string account_id = 3;
}
