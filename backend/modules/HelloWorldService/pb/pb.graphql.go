// Code generated by proroc-gen-graphql, DO NOT EDIT.
package pb

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_empty "github.com/ysugimoto/grpc-graphql-gateway/ptypes/empty"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_Hello  *graphql.Object      // message Hello in hello-world-service.proto
	gql__input_Hello *graphql.InputObject // message Hello in hello-world-service.proto
)

func Gql__type_Hello() *graphql.Object {
	if gql__type_Hello == nil {
		gql__type_Hello = graphql.NewObject(graphql.ObjectConfig{
			Name: "Pb_Type_Hello",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_Hello
}

func Gql__input_Hello() *graphql.InputObject {
	if gql__input_Hello == nil {
		gql__input_Hello = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Pb_Input_Hello",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_Hello
}

// graphql__resolver_HelloWorldService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_HelloWorldService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_HelloWorldService creates pointer of service struct
func new_graphql_resolver_HelloWorldService(conn *grpc.ClientConn) *graphql__resolver_HelloWorldService {
	return &graphql__resolver_HelloWorldService{
		conn: conn,
		host: "localhost:8080",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_HelloWorldService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_HelloWorldService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"hello": &graphql.Field{
			Type: gql_ptypes_empty.Gql__type_Empty(),
			Args: graphql.FieldConfigArgument{
				"message": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req Hello
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for hello")
				}
				client := NewHelloWorldServiceClient(conn)
				resp, err := client.HelloWorld(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC HelloWorld")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_HelloWorldService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterHelloWorldServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterHelloWorldServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterHelloWorldServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service HelloWorldService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterHelloWorldServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_HelloWorldService(conn))
}
