{{ $fullname := include "backend.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /cnb/process/api
          env:
  {{- range $secretKey, $v := .Values.envs.secrets }}
            - name: {{ $secretKey }}
              valueFrom:
                secretKeyRef:
                  name: {{$fullname}}
                  key: {{ $secretKey }}
  {{- end }}

  {{- range $configName, $confgValue := .Values.envs.configs }}
            - name: {{ $configName }}
              value: {{ $confgValue | toString | quote }}
  {{- end }}

          ports:
            - name: graphql
              containerPort: 8081
              protocol: TCP

            - name: rest
              containerPort: 8082
              protocol: TCP

            - name: grpc
              containerPort: 8000
              protocol: TCP

            - name: health
              containerPort: 8083
              protocol: TCP

#          livenessProbe:
#            httpGet:
#              path: /health/
#              port: 8083
#          readinessProbe:
#            httpGet:
#              path: /health/
#              port: 8083
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: "/app"

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ $fullname }}
              topologyKey: "kubernetes.io/hostname"

      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ $fullname }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

