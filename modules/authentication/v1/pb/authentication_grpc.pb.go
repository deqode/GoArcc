// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ValidateLoginServiceClient is the client API for ValidateLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidateLoginServiceClient interface {
	ValidateUserLogin(ctx context.Context, in *ValidateUserLoginRequest, opts ...grpc.CallOption) (*ValidateUserLoginResponse, error)
}

type validateLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidateLoginServiceClient(cc grpc.ClientConnInterface) ValidateLoginServiceClient {
	return &validateLoginServiceClient{cc}
}

func (c *validateLoginServiceClient) ValidateUserLogin(ctx context.Context, in *ValidateUserLoginRequest, opts ...grpc.CallOption) (*ValidateUserLoginResponse, error) {
	out := new(ValidateUserLoginResponse)
	err := c.cc.Invoke(ctx, "/goarcc.authentication.v1.ValidateLoginService/ValidateUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidateLoginServiceServer is the server API for ValidateLoginService service.
// All implementations should embed UnimplementedValidateLoginServiceServer
// for forward compatibility
type ValidateLoginServiceServer interface {
	ValidateUserLogin(context.Context, *ValidateUserLoginRequest) (*ValidateUserLoginResponse, error)
}

// UnimplementedValidateLoginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedValidateLoginServiceServer struct {
}

func (UnimplementedValidateLoginServiceServer) ValidateUserLogin(context.Context, *ValidateUserLoginRequest) (*ValidateUserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserLogin not implemented")
}

// UnsafeValidateLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidateLoginServiceServer will
// result in compilation errors.
type UnsafeValidateLoginServiceServer interface {
	mustEmbedUnimplementedValidateLoginServiceServer()
}

func RegisterValidateLoginServiceServer(s *grpc.Server, srv ValidateLoginServiceServer) {
	s.RegisterService(&_ValidateLoginService_serviceDesc, srv)
}

func _ValidateLoginService_ValidateUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidateLoginServiceServer).ValidateUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goarcc.authentication.v1.ValidateLoginService/ValidateUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidateLoginServiceServer).ValidateUserLogin(ctx, req.(*ValidateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidateLoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goarcc.authentication.v1.ValidateLoginService",
	HandlerType: (*ValidateLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateUserLogin",
			Handler:    _ValidateLoginService_ValidateUserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/authentication.proto",
}

// AuthenticationsClient is the client API for Authentications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationsClient interface {
	// Login provide a url of External OAuth login endpoint (Auth0)
	Login(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoginResponse, error)
	// LoginCallback receives a callback  from external OAuth application
	LoginCallback(ctx context.Context, in *LoginCallbackRequest, opts ...grpc.CallOption) (*LoginCallbackResponse, error)
	Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type authenticationsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationsClient(cc grpc.ClientConnInterface) AuthenticationsClient {
	return &authenticationsClient{cc}
}

func (c *authenticationsClient) Login(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/goarcc.authentication.v1.Authentications/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationsClient) LoginCallback(ctx context.Context, in *LoginCallbackRequest, opts ...grpc.CallOption) (*LoginCallbackResponse, error) {
	out := new(LoginCallbackResponse)
	err := c.cc.Invoke(ctx, "/goarcc.authentication.v1.Authentications/LoginCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationsClient) Logout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/goarcc.authentication.v1.Authentications/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationsServer is the server API for Authentications service.
// All implementations should embed UnimplementedAuthenticationsServer
// for forward compatibility
type AuthenticationsServer interface {
	// Login provide a url of External OAuth login endpoint (Auth0)
	Login(context.Context, *empty.Empty) (*LoginResponse, error)
	// LoginCallback receives a callback  from external OAuth application
	LoginCallback(context.Context, *LoginCallbackRequest) (*LoginCallbackResponse, error)
	Logout(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedAuthenticationsServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticationsServer struct {
}

func (UnimplementedAuthenticationsServer) Login(context.Context, *empty.Empty) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthenticationsServer) LoginCallback(context.Context, *LoginCallbackRequest) (*LoginCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCallback not implemented")
}
func (UnimplementedAuthenticationsServer) Logout(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}

// UnsafeAuthenticationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationsServer will
// result in compilation errors.
type UnsafeAuthenticationsServer interface {
	mustEmbedUnimplementedAuthenticationsServer()
}

func RegisterAuthenticationsServer(s *grpc.Server, srv AuthenticationsServer) {
	s.RegisterService(&_Authentications_serviceDesc, srv)
}

func _Authentications_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goarcc.authentication.v1.Authentications/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationsServer).Login(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentications_LoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationsServer).LoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goarcc.authentication.v1.Authentications/LoginCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationsServer).LoginCallback(ctx, req.(*LoginCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentications_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationsServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goarcc.authentication.v1.Authentications/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationsServer).Logout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goarcc.authentication.v1.Authentications",
	HandlerType: (*AuthenticationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Authentications_Login_Handler,
		},
		{
			MethodName: "LoginCallback",
			Handler:    _Authentications_LoginCallback_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Authentications_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/authentication.proto",
}
