// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserInternalClient is the client API for UserInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInternalClient interface {
	//CreateUser creates a user profile by external oAuth
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInternalClient(cc grpc.ClientConnInterface) UserInternalClient {
	return &userInternalClient{cc}
}

func (c *userInternalClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/goarcc.user.v1.userInternal/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInternalServer is the server API for UserInternal service.
// All implementations should embed UnimplementedUserInternalServer
// for forward compatibility
type UserInternalServer interface {
	//CreateUser creates a user profile by external oAuth
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
}

// UnimplementedUserInternalServer should be embedded to have forward compatible implementations.
type UnimplementedUserInternalServer struct {
}

func (UnimplementedUserInternalServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}

// UnsafeUserInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInternalServer will
// result in compilation errors.
type UnsafeUserInternalServer interface {
	mustEmbedUnimplementedUserInternalServer()
}

func RegisterUserInternalServer(s *grpc.Server, srv UserInternalServer) {
	s.RegisterService(&_UserInternal_serviceDesc, srv)
}

func _UserInternal_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInternalServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goarcc.user.v1.userInternal/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInternalServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goarcc.user.v1.userInternal",
	HandlerType: (*UserInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserInternal_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/user_int.proto",
}
